// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/com/poker/protocols/texaspoker/proto/TexasGameBroadcastAction.proto

package com.poker.protocols.texaspoker;

public final class TexasGameBroadcastActionProto {
  private TexasGameBroadcastActionProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface TexasGameBroadcastActionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *当前操作者操作结果
     * </pre>
     *
     * <code>int32 seatId = 1;</code>
     */
    int getSeatId();

    /**
     * <code>.com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction.Operate operate = 2;</code>
     */
    int getOperateValue();
    /**
     * <code>.com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction.Operate operate = 2;</code>
     */
    com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.Operate getOperate();

    /**
     * <code>int64 chip = 3;</code>
     */
    long getChip();

    /**
     * <code>int64 remaining_chip = 4;</code>
     */
    long getRemainingChip();

    /**
     * <code>int64 round_chip = 5;</code>
     */
    long getRoundChip();

    /**
     * <pre>
     *下一个操作者操作需求
     * </pre>
     *
     * <code>int32 next_op_seatId = 6;</code>
     */
    int getNextOpSeatId();

    /**
     * <code>int64 next_op_call_chip = 7;</code>
     */
    long getNextOpCallChip();

    /**
     * <code>int64 next_op_min_raise_chip = 8;</code>
     */
    long getNextOpMinRaiseChip();

    /**
     * <code>int64 next_op_max_raise_chip = 9;</code>
     */
    long getNextOpMaxRaiseChip();

    /**
     * <code>int64 max_round_chip = 10;</code>
     */
    long getMaxRoundChip();
  }
  /**
   * Protobuf type {@code com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction}
   */
  public  static final class TexasGameBroadcastAction extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction)
      TexasGameBroadcastActionOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TexasGameBroadcastAction.newBuilder() to construct.
    private TexasGameBroadcastAction(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TexasGameBroadcastAction() {
      seatId_ = 0;
      operate_ = 0;
      chip_ = 0L;
      remainingChip_ = 0L;
      roundChip_ = 0L;
      nextOpSeatId_ = 0;
      nextOpCallChip_ = 0L;
      nextOpMinRaiseChip_ = 0L;
      nextOpMaxRaiseChip_ = 0L;
      maxRoundChip_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TexasGameBroadcastAction(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              seatId_ = input.readInt32();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              operate_ = rawValue;
              break;
            }
            case 24: {

              chip_ = input.readInt64();
              break;
            }
            case 32: {

              remainingChip_ = input.readInt64();
              break;
            }
            case 40: {

              roundChip_ = input.readInt64();
              break;
            }
            case 48: {

              nextOpSeatId_ = input.readInt32();
              break;
            }
            case 56: {

              nextOpCallChip_ = input.readInt64();
              break;
            }
            case 64: {

              nextOpMinRaiseChip_ = input.readInt64();
              break;
            }
            case 72: {

              nextOpMaxRaiseChip_ = input.readInt64();
              break;
            }
            case 80: {

              maxRoundChip_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.internal_static_com_poker_protocols_texaspoker_proto_TexasGameBroadcastAction_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.internal_static_com_poker_protocols_texaspoker_proto_TexasGameBroadcastAction_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.class, com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.Builder.class);
    }

    /**
     * Protobuf enum {@code com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction.Operate}
     */
    public enum Operate
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>FOLD = 0;</code>
       */
      FOLD(0),
      /**
       * <code>CHECK = 1;</code>
       */
      CHECK(1),
      /**
       * <code>CALL = 2;</code>
       */
      CALL(2),
      /**
       * <code>RAISE = 3;</code>
       */
      RAISE(3),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>FOLD = 0;</code>
       */
      public static final int FOLD_VALUE = 0;
      /**
       * <code>CHECK = 1;</code>
       */
      public static final int CHECK_VALUE = 1;
      /**
       * <code>CALL = 2;</code>
       */
      public static final int CALL_VALUE = 2;
      /**
       * <code>RAISE = 3;</code>
       */
      public static final int RAISE_VALUE = 3;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Operate valueOf(int value) {
        return forNumber(value);
      }

      public static Operate forNumber(int value) {
        switch (value) {
          case 0: return FOLD;
          case 1: return CHECK;
          case 2: return CALL;
          case 3: return RAISE;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Operate>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Operate> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Operate>() {
              public Operate findValueByNumber(int number) {
                return Operate.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.getDescriptor().getEnumTypes().get(0);
      }

      private static final Operate[] VALUES = values();

      public static Operate valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Operate(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction.Operate)
    }

    public static final int SEATID_FIELD_NUMBER = 1;
    private int seatId_;
    /**
     * <pre>
     *当前操作者操作结果
     * </pre>
     *
     * <code>int32 seatId = 1;</code>
     */
    public int getSeatId() {
      return seatId_;
    }

    public static final int OPERATE_FIELD_NUMBER = 2;
    private int operate_;
    /**
     * <code>.com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction.Operate operate = 2;</code>
     */
    public int getOperateValue() {
      return operate_;
    }
    /**
     * <code>.com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction.Operate operate = 2;</code>
     */
    public com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.Operate getOperate() {
      com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.Operate result = com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.Operate.valueOf(operate_);
      return result == null ? com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.Operate.UNRECOGNIZED : result;
    }

    public static final int CHIP_FIELD_NUMBER = 3;
    private long chip_;
    /**
     * <code>int64 chip = 3;</code>
     */
    public long getChip() {
      return chip_;
    }

    public static final int REMAINING_CHIP_FIELD_NUMBER = 4;
    private long remainingChip_;
    /**
     * <code>int64 remaining_chip = 4;</code>
     */
    public long getRemainingChip() {
      return remainingChip_;
    }

    public static final int ROUND_CHIP_FIELD_NUMBER = 5;
    private long roundChip_;
    /**
     * <code>int64 round_chip = 5;</code>
     */
    public long getRoundChip() {
      return roundChip_;
    }

    public static final int NEXT_OP_SEATID_FIELD_NUMBER = 6;
    private int nextOpSeatId_;
    /**
     * <pre>
     *下一个操作者操作需求
     * </pre>
     *
     * <code>int32 next_op_seatId = 6;</code>
     */
    public int getNextOpSeatId() {
      return nextOpSeatId_;
    }

    public static final int NEXT_OP_CALL_CHIP_FIELD_NUMBER = 7;
    private long nextOpCallChip_;
    /**
     * <code>int64 next_op_call_chip = 7;</code>
     */
    public long getNextOpCallChip() {
      return nextOpCallChip_;
    }

    public static final int NEXT_OP_MIN_RAISE_CHIP_FIELD_NUMBER = 8;
    private long nextOpMinRaiseChip_;
    /**
     * <code>int64 next_op_min_raise_chip = 8;</code>
     */
    public long getNextOpMinRaiseChip() {
      return nextOpMinRaiseChip_;
    }

    public static final int NEXT_OP_MAX_RAISE_CHIP_FIELD_NUMBER = 9;
    private long nextOpMaxRaiseChip_;
    /**
     * <code>int64 next_op_max_raise_chip = 9;</code>
     */
    public long getNextOpMaxRaiseChip() {
      return nextOpMaxRaiseChip_;
    }

    public static final int MAX_ROUND_CHIP_FIELD_NUMBER = 10;
    private long maxRoundChip_;
    /**
     * <code>int64 max_round_chip = 10;</code>
     */
    public long getMaxRoundChip() {
      return maxRoundChip_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (seatId_ != 0) {
        output.writeInt32(1, seatId_);
      }
      if (operate_ != com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.Operate.FOLD.getNumber()) {
        output.writeEnum(2, operate_);
      }
      if (chip_ != 0L) {
        output.writeInt64(3, chip_);
      }
      if (remainingChip_ != 0L) {
        output.writeInt64(4, remainingChip_);
      }
      if (roundChip_ != 0L) {
        output.writeInt64(5, roundChip_);
      }
      if (nextOpSeatId_ != 0) {
        output.writeInt32(6, nextOpSeatId_);
      }
      if (nextOpCallChip_ != 0L) {
        output.writeInt64(7, nextOpCallChip_);
      }
      if (nextOpMinRaiseChip_ != 0L) {
        output.writeInt64(8, nextOpMinRaiseChip_);
      }
      if (nextOpMaxRaiseChip_ != 0L) {
        output.writeInt64(9, nextOpMaxRaiseChip_);
      }
      if (maxRoundChip_ != 0L) {
        output.writeInt64(10, maxRoundChip_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (seatId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, seatId_);
      }
      if (operate_ != com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.Operate.FOLD.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, operate_);
      }
      if (chip_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, chip_);
      }
      if (remainingChip_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, remainingChip_);
      }
      if (roundChip_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, roundChip_);
      }
      if (nextOpSeatId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, nextOpSeatId_);
      }
      if (nextOpCallChip_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(7, nextOpCallChip_);
      }
      if (nextOpMinRaiseChip_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, nextOpMinRaiseChip_);
      }
      if (nextOpMaxRaiseChip_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(9, nextOpMaxRaiseChip_);
      }
      if (maxRoundChip_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(10, maxRoundChip_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction)) {
        return super.equals(obj);
      }
      com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction other = (com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction) obj;

      boolean result = true;
      result = result && (getSeatId()
          == other.getSeatId());
      result = result && operate_ == other.operate_;
      result = result && (getChip()
          == other.getChip());
      result = result && (getRemainingChip()
          == other.getRemainingChip());
      result = result && (getRoundChip()
          == other.getRoundChip());
      result = result && (getNextOpSeatId()
          == other.getNextOpSeatId());
      result = result && (getNextOpCallChip()
          == other.getNextOpCallChip());
      result = result && (getNextOpMinRaiseChip()
          == other.getNextOpMinRaiseChip());
      result = result && (getNextOpMaxRaiseChip()
          == other.getNextOpMaxRaiseChip());
      result = result && (getMaxRoundChip()
          == other.getMaxRoundChip());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + SEATID_FIELD_NUMBER;
      hash = (53 * hash) + getSeatId();
      hash = (37 * hash) + OPERATE_FIELD_NUMBER;
      hash = (53 * hash) + operate_;
      hash = (37 * hash) + CHIP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getChip());
      hash = (37 * hash) + REMAINING_CHIP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getRemainingChip());
      hash = (37 * hash) + ROUND_CHIP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getRoundChip());
      hash = (37 * hash) + NEXT_OP_SEATID_FIELD_NUMBER;
      hash = (53 * hash) + getNextOpSeatId();
      hash = (37 * hash) + NEXT_OP_CALL_CHIP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNextOpCallChip());
      hash = (37 * hash) + NEXT_OP_MIN_RAISE_CHIP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNextOpMinRaiseChip());
      hash = (37 * hash) + NEXT_OP_MAX_RAISE_CHIP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNextOpMaxRaiseChip());
      hash = (37 * hash) + MAX_ROUND_CHIP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMaxRoundChip());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    //-----------------------------------------------------
    public static com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction parseFrom(byte[] data,int offset ,int length)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data,offset,length);
        }
    //-----------------------------------------------------
    public static com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    //-----------------------------------------------------
    public static com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction parseFrom(
    		byte[] data,int offset ,int length,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data,offset,length, extensionRegistry);
        }
   //-----------------------------------------------------
    public static com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction)
        com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastActionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.internal_static_com_poker_protocols_texaspoker_proto_TexasGameBroadcastAction_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.internal_static_com_poker_protocols_texaspoker_proto_TexasGameBroadcastAction_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.class, com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.Builder.class);
      }

      // Construct using com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        seatId_ = 0;

        operate_ = 0;

        chip_ = 0L;

        remainingChip_ = 0L;

        roundChip_ = 0L;

        nextOpSeatId_ = 0;

        nextOpCallChip_ = 0L;

        nextOpMinRaiseChip_ = 0L;

        nextOpMaxRaiseChip_ = 0L;

        maxRoundChip_ = 0L;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.internal_static_com_poker_protocols_texaspoker_proto_TexasGameBroadcastAction_descriptor;
      }

      public com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction getDefaultInstanceForType() {
        return com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.getDefaultInstance();
      }

      public com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction build() {
        com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction buildPartial() {
        com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction result = new com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction(this);
        result.seatId_ = seatId_;
        result.operate_ = operate_;
        result.chip_ = chip_;
        result.remainingChip_ = remainingChip_;
        result.roundChip_ = roundChip_;
        result.nextOpSeatId_ = nextOpSeatId_;
        result.nextOpCallChip_ = nextOpCallChip_;
        result.nextOpMinRaiseChip_ = nextOpMinRaiseChip_;
        result.nextOpMaxRaiseChip_ = nextOpMaxRaiseChip_;
        result.maxRoundChip_ = maxRoundChip_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction) {
          return mergeFrom((com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction other) {
        if (other == com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.getDefaultInstance()) return this;
        if (other.getSeatId() != 0) {
          setSeatId(other.getSeatId());
        }
        if (other.operate_ != 0) {
          setOperateValue(other.getOperateValue());
        }
        if (other.getChip() != 0L) {
          setChip(other.getChip());
        }
        if (other.getRemainingChip() != 0L) {
          setRemainingChip(other.getRemainingChip());
        }
        if (other.getRoundChip() != 0L) {
          setRoundChip(other.getRoundChip());
        }
        if (other.getNextOpSeatId() != 0) {
          setNextOpSeatId(other.getNextOpSeatId());
        }
        if (other.getNextOpCallChip() != 0L) {
          setNextOpCallChip(other.getNextOpCallChip());
        }
        if (other.getNextOpMinRaiseChip() != 0L) {
          setNextOpMinRaiseChip(other.getNextOpMinRaiseChip());
        }
        if (other.getNextOpMaxRaiseChip() != 0L) {
          setNextOpMaxRaiseChip(other.getNextOpMaxRaiseChip());
        }
        if (other.getMaxRoundChip() != 0L) {
          setMaxRoundChip(other.getMaxRoundChip());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private int seatId_ ;
      /**
       * <pre>
       *当前操作者操作结果
       * </pre>
       *
       * <code>int32 seatId = 1;</code>
       */
      public int getSeatId() {
        return seatId_;
      }
      /**
       * <pre>
       *当前操作者操作结果
       * </pre>
       *
       * <code>int32 seatId = 1;</code>
       */
      public Builder setSeatId(int value) {
        
        seatId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *当前操作者操作结果
       * </pre>
       *
       * <code>int32 seatId = 1;</code>
       */
      public Builder clearSeatId() {
        
        seatId_ = 0;
        onChanged();
        return this;
      }

      private int operate_ = 0;
      /**
       * <code>.com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction.Operate operate = 2;</code>
       */
      public int getOperateValue() {
        return operate_;
      }
      /**
       * <code>.com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction.Operate operate = 2;</code>
       */
      public Builder setOperateValue(int value) {
        operate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction.Operate operate = 2;</code>
       */
      public com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.Operate getOperate() {
        com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.Operate result = com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.Operate.valueOf(operate_);
        return result == null ? com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.Operate.UNRECOGNIZED : result;
      }
      /**
       * <code>.com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction.Operate operate = 2;</code>
       */
      public Builder setOperate(com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction.Operate value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        operate_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction.Operate operate = 2;</code>
       */
      public Builder clearOperate() {
        
        operate_ = 0;
        onChanged();
        return this;
      }

      private long chip_ ;
      /**
       * <code>int64 chip = 3;</code>
       */
      public long getChip() {
        return chip_;
      }
      /**
       * <code>int64 chip = 3;</code>
       */
      public Builder setChip(long value) {
        
        chip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 chip = 3;</code>
       */
      public Builder clearChip() {
        
        chip_ = 0L;
        onChanged();
        return this;
      }

      private long remainingChip_ ;
      /**
       * <code>int64 remaining_chip = 4;</code>
       */
      public long getRemainingChip() {
        return remainingChip_;
      }
      /**
       * <code>int64 remaining_chip = 4;</code>
       */
      public Builder setRemainingChip(long value) {
        
        remainingChip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 remaining_chip = 4;</code>
       */
      public Builder clearRemainingChip() {
        
        remainingChip_ = 0L;
        onChanged();
        return this;
      }

      private long roundChip_ ;
      /**
       * <code>int64 round_chip = 5;</code>
       */
      public long getRoundChip() {
        return roundChip_;
      }
      /**
       * <code>int64 round_chip = 5;</code>
       */
      public Builder setRoundChip(long value) {
        
        roundChip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 round_chip = 5;</code>
       */
      public Builder clearRoundChip() {
        
        roundChip_ = 0L;
        onChanged();
        return this;
      }

      private int nextOpSeatId_ ;
      /**
       * <pre>
       *下一个操作者操作需求
       * </pre>
       *
       * <code>int32 next_op_seatId = 6;</code>
       */
      public int getNextOpSeatId() {
        return nextOpSeatId_;
      }
      /**
       * <pre>
       *下一个操作者操作需求
       * </pre>
       *
       * <code>int32 next_op_seatId = 6;</code>
       */
      public Builder setNextOpSeatId(int value) {
        
        nextOpSeatId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *下一个操作者操作需求
       * </pre>
       *
       * <code>int32 next_op_seatId = 6;</code>
       */
      public Builder clearNextOpSeatId() {
        
        nextOpSeatId_ = 0;
        onChanged();
        return this;
      }

      private long nextOpCallChip_ ;
      /**
       * <code>int64 next_op_call_chip = 7;</code>
       */
      public long getNextOpCallChip() {
        return nextOpCallChip_;
      }
      /**
       * <code>int64 next_op_call_chip = 7;</code>
       */
      public Builder setNextOpCallChip(long value) {
        
        nextOpCallChip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 next_op_call_chip = 7;</code>
       */
      public Builder clearNextOpCallChip() {
        
        nextOpCallChip_ = 0L;
        onChanged();
        return this;
      }

      private long nextOpMinRaiseChip_ ;
      /**
       * <code>int64 next_op_min_raise_chip = 8;</code>
       */
      public long getNextOpMinRaiseChip() {
        return nextOpMinRaiseChip_;
      }
      /**
       * <code>int64 next_op_min_raise_chip = 8;</code>
       */
      public Builder setNextOpMinRaiseChip(long value) {
        
        nextOpMinRaiseChip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 next_op_min_raise_chip = 8;</code>
       */
      public Builder clearNextOpMinRaiseChip() {
        
        nextOpMinRaiseChip_ = 0L;
        onChanged();
        return this;
      }

      private long nextOpMaxRaiseChip_ ;
      /**
       * <code>int64 next_op_max_raise_chip = 9;</code>
       */
      public long getNextOpMaxRaiseChip() {
        return nextOpMaxRaiseChip_;
      }
      /**
       * <code>int64 next_op_max_raise_chip = 9;</code>
       */
      public Builder setNextOpMaxRaiseChip(long value) {
        
        nextOpMaxRaiseChip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 next_op_max_raise_chip = 9;</code>
       */
      public Builder clearNextOpMaxRaiseChip() {
        
        nextOpMaxRaiseChip_ = 0L;
        onChanged();
        return this;
      }

      private long maxRoundChip_ ;
      /**
       * <code>int64 max_round_chip = 10;</code>
       */
      public long getMaxRoundChip() {
        return maxRoundChip_;
      }
      /**
       * <code>int64 max_round_chip = 10;</code>
       */
      public Builder setMaxRoundChip(long value) {
        
        maxRoundChip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 max_round_chip = 10;</code>
       */
      public Builder clearMaxRoundChip() {
        
        maxRoundChip_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction)
    }

    // @@protoc_insertion_point(class_scope:com.poker.protocols.texaspoker.proto.TexasGameBroadcastAction)
    private static final com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction();
    }

    public static com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TexasGameBroadcastAction>
        PARSER = new com.google.protobuf.AbstractParser<TexasGameBroadcastAction>() {
      public TexasGameBroadcastAction parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TexasGameBroadcastAction(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TexasGameBroadcastAction> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TexasGameBroadcastAction> getParserForType() {
      return PARSER;
    }

    public com.poker.protocols.texaspoker.TexasGameBroadcastActionProto.TexasGameBroadcastAction getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_poker_protocols_texaspoker_proto_TexasGameBroadcastAction_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_poker_protocols_texaspoker_proto_TexasGameBroadcastAction_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\nGsrc/com/poker/protocols/texaspoker/pro" +
      "to/TexasGameBroadcastAction.proto\022$com.p" +
      "oker.protocols.texaspoker.proto\"\375\002\n\030Texa" +
      "sGameBroadcastAction\022\016\n\006seatId\030\001 \001(\005\022W\n\007" +
      "operate\030\002 \001(\0162F.com.poker.protocols.texa" +
      "spoker.proto.TexasGameBroadcastAction.Op" +
      "erate\022\014\n\004chip\030\003 \001(\003\022\026\n\016remaining_chip\030\004 " +
      "\001(\003\022\022\n\nround_chip\030\005 \001(\003\022\026\n\016next_op_seatI" +
      "d\030\006 \001(\005\022\031\n\021next_op_call_chip\030\007 \001(\003\022\036\n\026ne" +
      "xt_op_min_raise_chip\030\010 \001(\003\022\036\n\026next_op_ma" +
      "x_raise_chip\030\t \001(\003\022\026\n\016max_round_chip\030\n \001" +
      "(\003\"3\n\007Operate\022\010\n\004FOLD\020\000\022\t\n\005CHECK\020\001\022\010\n\004CA" +
      "LL\020\002\022\t\n\005RAISE\020\003B?\n\036com.poker.protocols.t" +
      "exaspokerB\035TexasGameBroadcastActionProto" +
      "b\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_com_poker_protocols_texaspoker_proto_TexasGameBroadcastAction_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_poker_protocols_texaspoker_proto_TexasGameBroadcastAction_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_poker_protocols_texaspoker_proto_TexasGameBroadcastAction_descriptor,
        new java.lang.String[] { "SeatId", "Operate", "Chip", "RemainingChip", "RoundChip", "NextOpSeatId", "NextOpCallChip", "NextOpMinRaiseChip", "NextOpMaxRaiseChip", "MaxRoundChip", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
