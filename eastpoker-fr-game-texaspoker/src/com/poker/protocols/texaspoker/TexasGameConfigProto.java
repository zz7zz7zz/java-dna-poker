// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/com/poker/protocols/texaspoker/proto/TexasGameConfig.proto

package com.poker.protocols.texaspoker;

public final class TexasGameConfigProto {
  private TexasGameConfigProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface TexasGameConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.poker.protocols.texaspoker.proto.TexasGameConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *房间等级
     * </pre>
     *
     * <code>int32 level = 1;</code>
     */
    int getLevel();

    /**
     * <pre>
     *房间等级名称
     * </pre>
     *
     * <code>string level_name = 2;</code>
     */
    java.lang.String getLevelName();
    /**
     * <pre>
     *房间等级名称
     * </pre>
     *
     * <code>string level_name = 2;</code>
     */
    com.google.protobuf.ByteString
        getLevelNameBytes();

    /**
     * <pre>
     *每台桌子最小玩家数量
     * </pre>
     *
     * <code>int32 min_user = 3;</code>
     */
    int getMinUser();

    /**
     * <pre>
     *每台桌子最大玩家数量
     * </pre>
     *
     * <code>int32 max_user = 4;</code>
     */
    int getMaxUser();

    /**
     * <pre>
     *最小进入筹码
     * </pre>
     *
     * <code>int64 min_chip = 5;</code>
     */
    long getMinChip();

    /**
     * <pre>
     *最大进入筹码
     * </pre>
     *
     * <code>int64 max_chip = 6;</code>
     */
    long getMaxChip();

    /**
     * <pre>
     *操作超时时间
     * </pre>
     *
     * <code>int32 action_timeout = 7;</code>
     */
    int getActionTimeout();

    /**
     * <pre>
     *前注;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int64 ante = 8;</code>
     */
    java.util.List<java.lang.Long> getAnteList();
    /**
     * <pre>
     *前注;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int64 ante = 8;</code>
     */
    int getAnteCount();
    /**
     * <pre>
     *前注;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int64 ante = 8;</code>
     */
    long getAnte(int index);

    /**
     * <pre>
     *大盲注;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int64 blind = 9;</code>
     */
    java.util.List<java.lang.Long> getBlindList();
    /**
     * <pre>
     *大盲注;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int64 blind = 9;</code>
     */
    int getBlindCount();
    /**
     * <pre>
     *大盲注;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int64 blind = 9;</code>
     */
    long getBlind(int index);

    /**
     * <pre>
     *每个盲注持续时间;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int32 blind_time = 10;</code>
     */
    java.util.List<java.lang.Integer> getBlindTimeList();
    /**
     * <pre>
     *每个盲注持续时间;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int32 blind_time = 10;</code>
     */
    int getBlindTimeCount();
    /**
     * <pre>
     *每个盲注持续时间;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int32 blind_time = 10;</code>
     */
    int getBlindTime(int index);
  }
  /**
   * Protobuf type {@code com.poker.protocols.texaspoker.proto.TexasGameConfig}
   */
  public  static final class TexasGameConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.poker.protocols.texaspoker.proto.TexasGameConfig)
      TexasGameConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TexasGameConfig.newBuilder() to construct.
    private TexasGameConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TexasGameConfig() {
      level_ = 0;
      levelName_ = "";
      minUser_ = 0;
      maxUser_ = 0;
      minChip_ = 0L;
      maxChip_ = 0L;
      actionTimeout_ = 0;
      ante_ = java.util.Collections.emptyList();
      blind_ = java.util.Collections.emptyList();
      blindTime_ = java.util.Collections.emptyList();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TexasGameConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              level_ = input.readInt32();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              levelName_ = s;
              break;
            }
            case 24: {

              minUser_ = input.readInt32();
              break;
            }
            case 32: {

              maxUser_ = input.readInt32();
              break;
            }
            case 40: {

              minChip_ = input.readInt64();
              break;
            }
            case 48: {

              maxChip_ = input.readInt64();
              break;
            }
            case 56: {

              actionTimeout_ = input.readInt32();
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                ante_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000080;
              }
              ante_.add(input.readInt64());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                ante_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                ante_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                blind_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000100;
              }
              blind_.add(input.readInt64());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                blind_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                blind_.add(input.readInt64());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                blindTime_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              blindTime_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                blindTime_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                blindTime_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          ante_ = java.util.Collections.unmodifiableList(ante_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          blind_ = java.util.Collections.unmodifiableList(blind_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          blindTime_ = java.util.Collections.unmodifiableList(blindTime_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.poker.protocols.texaspoker.TexasGameConfigProto.internal_static_com_poker_protocols_texaspoker_proto_TexasGameConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.poker.protocols.texaspoker.TexasGameConfigProto.internal_static_com_poker_protocols_texaspoker_proto_TexasGameConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig.class, com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig.Builder.class);
    }

    private int bitField0_;
    public static final int LEVEL_FIELD_NUMBER = 1;
    private int level_;
    /**
     * <pre>
     *房间等级
     * </pre>
     *
     * <code>int32 level = 1;</code>
     */
    public int getLevel() {
      return level_;
    }

    public static final int LEVEL_NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object levelName_;
    /**
     * <pre>
     *房间等级名称
     * </pre>
     *
     * <code>string level_name = 2;</code>
     */
    public java.lang.String getLevelName() {
      java.lang.Object ref = levelName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        levelName_ = s;
        return s;
      }
    }
    /**
     * <pre>
     *房间等级名称
     * </pre>
     *
     * <code>string level_name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getLevelNameBytes() {
      java.lang.Object ref = levelName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        levelName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int MIN_USER_FIELD_NUMBER = 3;
    private int minUser_;
    /**
     * <pre>
     *每台桌子最小玩家数量
     * </pre>
     *
     * <code>int32 min_user = 3;</code>
     */
    public int getMinUser() {
      return minUser_;
    }

    public static final int MAX_USER_FIELD_NUMBER = 4;
    private int maxUser_;
    /**
     * <pre>
     *每台桌子最大玩家数量
     * </pre>
     *
     * <code>int32 max_user = 4;</code>
     */
    public int getMaxUser() {
      return maxUser_;
    }

    public static final int MIN_CHIP_FIELD_NUMBER = 5;
    private long minChip_;
    /**
     * <pre>
     *最小进入筹码
     * </pre>
     *
     * <code>int64 min_chip = 5;</code>
     */
    public long getMinChip() {
      return minChip_;
    }

    public static final int MAX_CHIP_FIELD_NUMBER = 6;
    private long maxChip_;
    /**
     * <pre>
     *最大进入筹码
     * </pre>
     *
     * <code>int64 max_chip = 6;</code>
     */
    public long getMaxChip() {
      return maxChip_;
    }

    public static final int ACTION_TIMEOUT_FIELD_NUMBER = 7;
    private int actionTimeout_;
    /**
     * <pre>
     *操作超时时间
     * </pre>
     *
     * <code>int32 action_timeout = 7;</code>
     */
    public int getActionTimeout() {
      return actionTimeout_;
    }

    public static final int ANTE_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Long> ante_;
    /**
     * <pre>
     *前注;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int64 ante = 8;</code>
     */
    public java.util.List<java.lang.Long>
        getAnteList() {
      return ante_;
    }
    /**
     * <pre>
     *前注;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int64 ante = 8;</code>
     */
    public int getAnteCount() {
      return ante_.size();
    }
    /**
     * <pre>
     *前注;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int64 ante = 8;</code>
     */
    public long getAnte(int index) {
      return ante_.get(index);
    }
    private int anteMemoizedSerializedSize = -1;

    public static final int BLIND_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Long> blind_;
    /**
     * <pre>
     *大盲注;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int64 blind = 9;</code>
     */
    public java.util.List<java.lang.Long>
        getBlindList() {
      return blind_;
    }
    /**
     * <pre>
     *大盲注;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int64 blind = 9;</code>
     */
    public int getBlindCount() {
      return blind_.size();
    }
    /**
     * <pre>
     *大盲注;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int64 blind = 9;</code>
     */
    public long getBlind(int index) {
      return blind_.get(index);
    }
    private int blindMemoizedSerializedSize = -1;

    public static final int BLIND_TIME_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> blindTime_;
    /**
     * <pre>
     *每个盲注持续时间;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int32 blind_time = 10;</code>
     */
    public java.util.List<java.lang.Integer>
        getBlindTimeList() {
      return blindTime_;
    }
    /**
     * <pre>
     *每个盲注持续时间;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int32 blind_time = 10;</code>
     */
    public int getBlindTimeCount() {
      return blindTime_.size();
    }
    /**
     * <pre>
     *每个盲注持续时间;数组意味着比赛场，如SNG
     * </pre>
     *
     * <code>repeated int32 blind_time = 10;</code>
     */
    public int getBlindTime(int index) {
      return blindTime_.get(index);
    }
    private int blindTimeMemoizedSerializedSize = -1;

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (level_ != 0) {
        output.writeInt32(1, level_);
      }
      if (!getLevelNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, levelName_);
      }
      if (minUser_ != 0) {
        output.writeInt32(3, minUser_);
      }
      if (maxUser_ != 0) {
        output.writeInt32(4, maxUser_);
      }
      if (minChip_ != 0L) {
        output.writeInt64(5, minChip_);
      }
      if (maxChip_ != 0L) {
        output.writeInt64(6, maxChip_);
      }
      if (actionTimeout_ != 0) {
        output.writeInt32(7, actionTimeout_);
      }
      if (getAnteList().size() > 0) {
        output.writeUInt32NoTag(66);
        output.writeUInt32NoTag(anteMemoizedSerializedSize);
      }
      for (int i = 0; i < ante_.size(); i++) {
        output.writeInt64NoTag(ante_.get(i));
      }
      if (getBlindList().size() > 0) {
        output.writeUInt32NoTag(74);
        output.writeUInt32NoTag(blindMemoizedSerializedSize);
      }
      for (int i = 0; i < blind_.size(); i++) {
        output.writeInt64NoTag(blind_.get(i));
      }
      if (getBlindTimeList().size() > 0) {
        output.writeUInt32NoTag(82);
        output.writeUInt32NoTag(blindTimeMemoizedSerializedSize);
      }
      for (int i = 0; i < blindTime_.size(); i++) {
        output.writeInt32NoTag(blindTime_.get(i));
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (level_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, level_);
      }
      if (!getLevelNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, levelName_);
      }
      if (minUser_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, minUser_);
      }
      if (maxUser_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, maxUser_);
      }
      if (minChip_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, minChip_);
      }
      if (maxChip_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(6, maxChip_);
      }
      if (actionTimeout_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, actionTimeout_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < ante_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(ante_.get(i));
        }
        size += dataSize;
        if (!getAnteList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        anteMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < blind_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt64SizeNoTag(blind_.get(i));
        }
        size += dataSize;
        if (!getBlindList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        blindMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < blindTime_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(blindTime_.get(i));
        }
        size += dataSize;
        if (!getBlindTimeList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        blindTimeMemoizedSerializedSize = dataSize;
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig)) {
        return super.equals(obj);
      }
      com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig other = (com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig) obj;

      boolean result = true;
      result = result && (getLevel()
          == other.getLevel());
      result = result && getLevelName()
          .equals(other.getLevelName());
      result = result && (getMinUser()
          == other.getMinUser());
      result = result && (getMaxUser()
          == other.getMaxUser());
      result = result && (getMinChip()
          == other.getMinChip());
      result = result && (getMaxChip()
          == other.getMaxChip());
      result = result && (getActionTimeout()
          == other.getActionTimeout());
      result = result && getAnteList()
          .equals(other.getAnteList());
      result = result && getBlindList()
          .equals(other.getBlindList());
      result = result && getBlindTimeList()
          .equals(other.getBlindTimeList());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + LEVEL_FIELD_NUMBER;
      hash = (53 * hash) + getLevel();
      hash = (37 * hash) + LEVEL_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getLevelName().hashCode();
      hash = (37 * hash) + MIN_USER_FIELD_NUMBER;
      hash = (53 * hash) + getMinUser();
      hash = (37 * hash) + MAX_USER_FIELD_NUMBER;
      hash = (53 * hash) + getMaxUser();
      hash = (37 * hash) + MIN_CHIP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMinChip());
      hash = (37 * hash) + MAX_CHIP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMaxChip());
      hash = (37 * hash) + ACTION_TIMEOUT_FIELD_NUMBER;
      hash = (53 * hash) + getActionTimeout();
      if (getAnteCount() > 0) {
        hash = (37 * hash) + ANTE_FIELD_NUMBER;
        hash = (53 * hash) + getAnteList().hashCode();
      }
      if (getBlindCount() > 0) {
        hash = (37 * hash) + BLIND_FIELD_NUMBER;
        hash = (53 * hash) + getBlindList().hashCode();
      }
      if (getBlindTimeCount() > 0) {
        hash = (37 * hash) + BLIND_TIME_FIELD_NUMBER;
        hash = (53 * hash) + getBlindTimeList().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.poker.protocols.texaspoker.proto.TexasGameConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.poker.protocols.texaspoker.proto.TexasGameConfig)
        com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.poker.protocols.texaspoker.TexasGameConfigProto.internal_static_com_poker_protocols_texaspoker_proto_TexasGameConfig_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.poker.protocols.texaspoker.TexasGameConfigProto.internal_static_com_poker_protocols_texaspoker_proto_TexasGameConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig.class, com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig.Builder.class);
      }

      // Construct using com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        level_ = 0;

        levelName_ = "";

        minUser_ = 0;

        maxUser_ = 0;

        minChip_ = 0L;

        maxChip_ = 0L;

        actionTimeout_ = 0;

        ante_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        blind_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        blindTime_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.poker.protocols.texaspoker.TexasGameConfigProto.internal_static_com_poker_protocols_texaspoker_proto_TexasGameConfig_descriptor;
      }

      public com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig getDefaultInstanceForType() {
        return com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig.getDefaultInstance();
      }

      public com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig build() {
        com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig buildPartial() {
        com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig result = new com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        result.level_ = level_;
        result.levelName_ = levelName_;
        result.minUser_ = minUser_;
        result.maxUser_ = maxUser_;
        result.minChip_ = minChip_;
        result.maxChip_ = maxChip_;
        result.actionTimeout_ = actionTimeout_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          ante_ = java.util.Collections.unmodifiableList(ante_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.ante_ = ante_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          blind_ = java.util.Collections.unmodifiableList(blind_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.blind_ = blind_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          blindTime_ = java.util.Collections.unmodifiableList(blindTime_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.blindTime_ = blindTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig) {
          return mergeFrom((com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig other) {
        if (other == com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig.getDefaultInstance()) return this;
        if (other.getLevel() != 0) {
          setLevel(other.getLevel());
        }
        if (!other.getLevelName().isEmpty()) {
          levelName_ = other.levelName_;
          onChanged();
        }
        if (other.getMinUser() != 0) {
          setMinUser(other.getMinUser());
        }
        if (other.getMaxUser() != 0) {
          setMaxUser(other.getMaxUser());
        }
        if (other.getMinChip() != 0L) {
          setMinChip(other.getMinChip());
        }
        if (other.getMaxChip() != 0L) {
          setMaxChip(other.getMaxChip());
        }
        if (other.getActionTimeout() != 0) {
          setActionTimeout(other.getActionTimeout());
        }
        if (!other.ante_.isEmpty()) {
          if (ante_.isEmpty()) {
            ante_ = other.ante_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureAnteIsMutable();
            ante_.addAll(other.ante_);
          }
          onChanged();
        }
        if (!other.blind_.isEmpty()) {
          if (blind_.isEmpty()) {
            blind_ = other.blind_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureBlindIsMutable();
            blind_.addAll(other.blind_);
          }
          onChanged();
        }
        if (!other.blindTime_.isEmpty()) {
          if (blindTime_.isEmpty()) {
            blindTime_ = other.blindTime_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureBlindTimeIsMutable();
            blindTime_.addAll(other.blindTime_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int level_ ;
      /**
       * <pre>
       *房间等级
       * </pre>
       *
       * <code>int32 level = 1;</code>
       */
      public int getLevel() {
        return level_;
      }
      /**
       * <pre>
       *房间等级
       * </pre>
       *
       * <code>int32 level = 1;</code>
       */
      public Builder setLevel(int value) {
        
        level_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *房间等级
       * </pre>
       *
       * <code>int32 level = 1;</code>
       */
      public Builder clearLevel() {
        
        level_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object levelName_ = "";
      /**
       * <pre>
       *房间等级名称
       * </pre>
       *
       * <code>string level_name = 2;</code>
       */
      public java.lang.String getLevelName() {
        java.lang.Object ref = levelName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          levelName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       *房间等级名称
       * </pre>
       *
       * <code>string level_name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getLevelNameBytes() {
        java.lang.Object ref = levelName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          levelName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       *房间等级名称
       * </pre>
       *
       * <code>string level_name = 2;</code>
       */
      public Builder setLevelName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        levelName_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *房间等级名称
       * </pre>
       *
       * <code>string level_name = 2;</code>
       */
      public Builder clearLevelName() {
        
        levelName_ = getDefaultInstance().getLevelName();
        onChanged();
        return this;
      }
      /**
       * <pre>
       *房间等级名称
       * </pre>
       *
       * <code>string level_name = 2;</code>
       */
      public Builder setLevelNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        levelName_ = value;
        onChanged();
        return this;
      }

      private int minUser_ ;
      /**
       * <pre>
       *每台桌子最小玩家数量
       * </pre>
       *
       * <code>int32 min_user = 3;</code>
       */
      public int getMinUser() {
        return minUser_;
      }
      /**
       * <pre>
       *每台桌子最小玩家数量
       * </pre>
       *
       * <code>int32 min_user = 3;</code>
       */
      public Builder setMinUser(int value) {
        
        minUser_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *每台桌子最小玩家数量
       * </pre>
       *
       * <code>int32 min_user = 3;</code>
       */
      public Builder clearMinUser() {
        
        minUser_ = 0;
        onChanged();
        return this;
      }

      private int maxUser_ ;
      /**
       * <pre>
       *每台桌子最大玩家数量
       * </pre>
       *
       * <code>int32 max_user = 4;</code>
       */
      public int getMaxUser() {
        return maxUser_;
      }
      /**
       * <pre>
       *每台桌子最大玩家数量
       * </pre>
       *
       * <code>int32 max_user = 4;</code>
       */
      public Builder setMaxUser(int value) {
        
        maxUser_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *每台桌子最大玩家数量
       * </pre>
       *
       * <code>int32 max_user = 4;</code>
       */
      public Builder clearMaxUser() {
        
        maxUser_ = 0;
        onChanged();
        return this;
      }

      private long minChip_ ;
      /**
       * <pre>
       *最小进入筹码
       * </pre>
       *
       * <code>int64 min_chip = 5;</code>
       */
      public long getMinChip() {
        return minChip_;
      }
      /**
       * <pre>
       *最小进入筹码
       * </pre>
       *
       * <code>int64 min_chip = 5;</code>
       */
      public Builder setMinChip(long value) {
        
        minChip_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *最小进入筹码
       * </pre>
       *
       * <code>int64 min_chip = 5;</code>
       */
      public Builder clearMinChip() {
        
        minChip_ = 0L;
        onChanged();
        return this;
      }

      private long maxChip_ ;
      /**
       * <pre>
       *最大进入筹码
       * </pre>
       *
       * <code>int64 max_chip = 6;</code>
       */
      public long getMaxChip() {
        return maxChip_;
      }
      /**
       * <pre>
       *最大进入筹码
       * </pre>
       *
       * <code>int64 max_chip = 6;</code>
       */
      public Builder setMaxChip(long value) {
        
        maxChip_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *最大进入筹码
       * </pre>
       *
       * <code>int64 max_chip = 6;</code>
       */
      public Builder clearMaxChip() {
        
        maxChip_ = 0L;
        onChanged();
        return this;
      }

      private int actionTimeout_ ;
      /**
       * <pre>
       *操作超时时间
       * </pre>
       *
       * <code>int32 action_timeout = 7;</code>
       */
      public int getActionTimeout() {
        return actionTimeout_;
      }
      /**
       * <pre>
       *操作超时时间
       * </pre>
       *
       * <code>int32 action_timeout = 7;</code>
       */
      public Builder setActionTimeout(int value) {
        
        actionTimeout_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *操作超时时间
       * </pre>
       *
       * <code>int32 action_timeout = 7;</code>
       */
      public Builder clearActionTimeout() {
        
        actionTimeout_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> ante_ = java.util.Collections.emptyList();
      private void ensureAnteIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          ante_ = new java.util.ArrayList<java.lang.Long>(ante_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <pre>
       *前注;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int64 ante = 8;</code>
       */
      public java.util.List<java.lang.Long>
          getAnteList() {
        return java.util.Collections.unmodifiableList(ante_);
      }
      /**
       * <pre>
       *前注;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int64 ante = 8;</code>
       */
      public int getAnteCount() {
        return ante_.size();
      }
      /**
       * <pre>
       *前注;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int64 ante = 8;</code>
       */
      public long getAnte(int index) {
        return ante_.get(index);
      }
      /**
       * <pre>
       *前注;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int64 ante = 8;</code>
       */
      public Builder setAnte(
          int index, long value) {
        ensureAnteIsMutable();
        ante_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *前注;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int64 ante = 8;</code>
       */
      public Builder addAnte(long value) {
        ensureAnteIsMutable();
        ante_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *前注;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int64 ante = 8;</code>
       */
      public Builder addAllAnte(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureAnteIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, ante_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *前注;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int64 ante = 8;</code>
       */
      public Builder clearAnte() {
        ante_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Long> blind_ = java.util.Collections.emptyList();
      private void ensureBlindIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          blind_ = new java.util.ArrayList<java.lang.Long>(blind_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <pre>
       *大盲注;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int64 blind = 9;</code>
       */
      public java.util.List<java.lang.Long>
          getBlindList() {
        return java.util.Collections.unmodifiableList(blind_);
      }
      /**
       * <pre>
       *大盲注;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int64 blind = 9;</code>
       */
      public int getBlindCount() {
        return blind_.size();
      }
      /**
       * <pre>
       *大盲注;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int64 blind = 9;</code>
       */
      public long getBlind(int index) {
        return blind_.get(index);
      }
      /**
       * <pre>
       *大盲注;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int64 blind = 9;</code>
       */
      public Builder setBlind(
          int index, long value) {
        ensureBlindIsMutable();
        blind_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *大盲注;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int64 blind = 9;</code>
       */
      public Builder addBlind(long value) {
        ensureBlindIsMutable();
        blind_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *大盲注;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int64 blind = 9;</code>
       */
      public Builder addAllBlind(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureBlindIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blind_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *大盲注;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int64 blind = 9;</code>
       */
      public Builder clearBlind() {
        blind_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> blindTime_ = java.util.Collections.emptyList();
      private void ensureBlindTimeIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          blindTime_ = new java.util.ArrayList<java.lang.Integer>(blindTime_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <pre>
       *每个盲注持续时间;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int32 blind_time = 10;</code>
       */
      public java.util.List<java.lang.Integer>
          getBlindTimeList() {
        return java.util.Collections.unmodifiableList(blindTime_);
      }
      /**
       * <pre>
       *每个盲注持续时间;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int32 blind_time = 10;</code>
       */
      public int getBlindTimeCount() {
        return blindTime_.size();
      }
      /**
       * <pre>
       *每个盲注持续时间;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int32 blind_time = 10;</code>
       */
      public int getBlindTime(int index) {
        return blindTime_.get(index);
      }
      /**
       * <pre>
       *每个盲注持续时间;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int32 blind_time = 10;</code>
       */
      public Builder setBlindTime(
          int index, int value) {
        ensureBlindTimeIsMutable();
        blindTime_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *每个盲注持续时间;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int32 blind_time = 10;</code>
       */
      public Builder addBlindTime(int value) {
        ensureBlindTimeIsMutable();
        blindTime_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *每个盲注持续时间;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int32 blind_time = 10;</code>
       */
      public Builder addAllBlindTime(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureBlindTimeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, blindTime_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *每个盲注持续时间;数组意味着比赛场，如SNG
       * </pre>
       *
       * <code>repeated int32 blind_time = 10;</code>
       */
      public Builder clearBlindTime() {
        blindTime_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.poker.protocols.texaspoker.proto.TexasGameConfig)
    }

    // @@protoc_insertion_point(class_scope:com.poker.protocols.texaspoker.proto.TexasGameConfig)
    private static final com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig();
    }

    public static com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TexasGameConfig>
        PARSER = new com.google.protobuf.AbstractParser<TexasGameConfig>() {
      public TexasGameConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TexasGameConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TexasGameConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TexasGameConfig> getParserForType() {
      return PARSER;
    }

    public com.poker.protocols.texaspoker.TexasGameConfigProto.TexasGameConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_poker_protocols_texaspoker_proto_TexasGameConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_poker_protocols_texaspoker_proto_TexasGameConfig_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n>src/com/poker/protocols/texaspoker/pro" +
      "to/TexasGameConfig.proto\022$com.poker.prot" +
      "ocols.texaspoker.proto\"\305\001\n\017TexasGameConf" +
      "ig\022\r\n\005level\030\001 \001(\005\022\022\n\nlevel_name\030\002 \001(\t\022\020\n" +
      "\010min_user\030\003 \001(\005\022\020\n\010max_user\030\004 \001(\005\022\020\n\010min" +
      "_chip\030\005 \001(\003\022\020\n\010max_chip\030\006 \001(\003\022\026\n\016action_" +
      "timeout\030\007 \001(\005\022\014\n\004ante\030\010 \003(\003\022\r\n\005blind\030\t \003" +
      "(\003\022\022\n\nblind_time\030\n \003(\005B6\n\036com.poker.prot" +
      "ocols.texaspokerB\024TexasGameConfigProtob\006" +
      "proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_com_poker_protocols_texaspoker_proto_TexasGameConfig_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_poker_protocols_texaspoker_proto_TexasGameConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_poker_protocols_texaspoker_proto_TexasGameConfig_descriptor,
        new java.lang.String[] { "Level", "LevelName", "MinUser", "MaxUser", "MinChip", "MaxChip", "ActionTimeout", "Ante", "Blind", "BlindTime", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
