// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/com/poker/protocols/texaspoker/proto/TexasGameReconnect.proto

package com.poker.protocols.texaspoker;

public final class TexasGameReconnectProto {
  private TexasGameReconnectProto() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface UserOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.poker.protocols.texaspoker.proto.User)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>int64 uid = 1;</code>
     */
    long getUid();

    /**
     * <code>string nick_name = 2;</code>
     */
    java.lang.String getNickName();
    /**
     * <code>string nick_name = 2;</code>
     */
    com.google.protobuf.ByteString
        getNickNameBytes();

    /**
     * <code>string head_portrait = 3;</code>
     */
    java.lang.String getHeadPortrait();
    /**
     * <code>string head_portrait = 3;</code>
     */
    com.google.protobuf.ByteString
        getHeadPortraitBytes();

    /**
     * <code>int64 chip = 4;</code>
     */
    long getChip();

    /**
     * <code>int32 level = 5;</code>
     */
    int getLevel();

    /**
     * <code>int32 seatId = 6;</code>
     */
    int getSeatId();

    /**
     * <code>.com.poker.protocols.texaspoker.proto.TexasGameAction.Operate operate = 7;</code>
     */
    int getOperateValue();
    /**
     * <code>.com.poker.protocols.texaspoker.proto.TexasGameAction.Operate operate = 7;</code>
     */
    com.poker.protocols.texaspoker.TexasGameActionProto.TexasGameAction.Operate getOperate();

    /**
     * <code>int64 round_chip = 8;</code>
     */
    long getRoundChip();
  }
  /**
   * Protobuf type {@code com.poker.protocols.texaspoker.proto.User}
   */
  public  static final class User extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.poker.protocols.texaspoker.proto.User)
      UserOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use User.newBuilder() to construct.
    private User(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private User() {
      uid_ = 0L;
      nickName_ = "";
      headPortrait_ = "";
      chip_ = 0L;
      level_ = 0;
      seatId_ = 0;
      operate_ = 0;
      roundChip_ = 0L;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private User(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {

              uid_ = input.readInt64();
              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              nickName_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              headPortrait_ = s;
              break;
            }
            case 32: {

              chip_ = input.readInt64();
              break;
            }
            case 40: {

              level_ = input.readInt32();
              break;
            }
            case 48: {

              seatId_ = input.readInt32();
              break;
            }
            case 56: {
              int rawValue = input.readEnum();

              operate_ = rawValue;
              break;
            }
            case 64: {

              roundChip_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.poker.protocols.texaspoker.TexasGameReconnectProto.internal_static_com_poker_protocols_texaspoker_proto_User_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.poker.protocols.texaspoker.TexasGameReconnectProto.internal_static_com_poker_protocols_texaspoker_proto_User_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.poker.protocols.texaspoker.TexasGameReconnectProto.User.class, com.poker.protocols.texaspoker.TexasGameReconnectProto.User.Builder.class);
    }

    public static final int UID_FIELD_NUMBER = 1;
    private long uid_;
    /**
     * <code>int64 uid = 1;</code>
     */
    public long getUid() {
      return uid_;
    }

    public static final int NICK_NAME_FIELD_NUMBER = 2;
    private volatile java.lang.Object nickName_;
    /**
     * <code>string nick_name = 2;</code>
     */
    public java.lang.String getNickName() {
      java.lang.Object ref = nickName_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        nickName_ = s;
        return s;
      }
    }
    /**
     * <code>string nick_name = 2;</code>
     */
    public com.google.protobuf.ByteString
        getNickNameBytes() {
      java.lang.Object ref = nickName_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        nickName_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int HEAD_PORTRAIT_FIELD_NUMBER = 3;
    private volatile java.lang.Object headPortrait_;
    /**
     * <code>string head_portrait = 3;</code>
     */
    public java.lang.String getHeadPortrait() {
      java.lang.Object ref = headPortrait_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        headPortrait_ = s;
        return s;
      }
    }
    /**
     * <code>string head_portrait = 3;</code>
     */
    public com.google.protobuf.ByteString
        getHeadPortraitBytes() {
      java.lang.Object ref = headPortrait_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        headPortrait_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int CHIP_FIELD_NUMBER = 4;
    private long chip_;
    /**
     * <code>int64 chip = 4;</code>
     */
    public long getChip() {
      return chip_;
    }

    public static final int LEVEL_FIELD_NUMBER = 5;
    private int level_;
    /**
     * <code>int32 level = 5;</code>
     */
    public int getLevel() {
      return level_;
    }

    public static final int SEATID_FIELD_NUMBER = 6;
    private int seatId_;
    /**
     * <code>int32 seatId = 6;</code>
     */
    public int getSeatId() {
      return seatId_;
    }

    public static final int OPERATE_FIELD_NUMBER = 7;
    private int operate_;
    /**
     * <code>.com.poker.protocols.texaspoker.proto.TexasGameAction.Operate operate = 7;</code>
     */
    public int getOperateValue() {
      return operate_;
    }
    /**
     * <code>.com.poker.protocols.texaspoker.proto.TexasGameAction.Operate operate = 7;</code>
     */
    public com.poker.protocols.texaspoker.TexasGameActionProto.TexasGameAction.Operate getOperate() {
      com.poker.protocols.texaspoker.TexasGameActionProto.TexasGameAction.Operate result = com.poker.protocols.texaspoker.TexasGameActionProto.TexasGameAction.Operate.valueOf(operate_);
      return result == null ? com.poker.protocols.texaspoker.TexasGameActionProto.TexasGameAction.Operate.UNRECOGNIZED : result;
    }

    public static final int ROUND_CHIP_FIELD_NUMBER = 8;
    private long roundChip_;
    /**
     * <code>int64 round_chip = 8;</code>
     */
    public long getRoundChip() {
      return roundChip_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (uid_ != 0L) {
        output.writeInt64(1, uid_);
      }
      if (!getNickNameBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, nickName_);
      }
      if (!getHeadPortraitBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, headPortrait_);
      }
      if (chip_ != 0L) {
        output.writeInt64(4, chip_);
      }
      if (level_ != 0) {
        output.writeInt32(5, level_);
      }
      if (seatId_ != 0) {
        output.writeInt32(6, seatId_);
      }
      if (operate_ != com.poker.protocols.texaspoker.TexasGameActionProto.TexasGameAction.Operate.FOLD.getNumber()) {
        output.writeEnum(7, operate_);
      }
      if (roundChip_ != 0L) {
        output.writeInt64(8, roundChip_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (uid_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, uid_);
      }
      if (!getNickNameBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, nickName_);
      }
      if (!getHeadPortraitBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, headPortrait_);
      }
      if (chip_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, chip_);
      }
      if (level_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, level_);
      }
      if (seatId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, seatId_);
      }
      if (operate_ != com.poker.protocols.texaspoker.TexasGameActionProto.TexasGameAction.Operate.FOLD.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(7, operate_);
      }
      if (roundChip_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(8, roundChip_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.poker.protocols.texaspoker.TexasGameReconnectProto.User)) {
        return super.equals(obj);
      }
      com.poker.protocols.texaspoker.TexasGameReconnectProto.User other = (com.poker.protocols.texaspoker.TexasGameReconnectProto.User) obj;

      boolean result = true;
      result = result && (getUid()
          == other.getUid());
      result = result && getNickName()
          .equals(other.getNickName());
      result = result && getHeadPortrait()
          .equals(other.getHeadPortrait());
      result = result && (getChip()
          == other.getChip());
      result = result && (getLevel()
          == other.getLevel());
      result = result && (getSeatId()
          == other.getSeatId());
      result = result && operate_ == other.operate_;
      result = result && (getRoundChip()
          == other.getRoundChip());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + UID_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getUid());
      hash = (37 * hash) + NICK_NAME_FIELD_NUMBER;
      hash = (53 * hash) + getNickName().hashCode();
      hash = (37 * hash) + HEAD_PORTRAIT_FIELD_NUMBER;
      hash = (53 * hash) + getHeadPortrait().hashCode();
      hash = (37 * hash) + CHIP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getChip());
      hash = (37 * hash) + LEVEL_FIELD_NUMBER;
      hash = (53 * hash) + getLevel();
      hash = (37 * hash) + SEATID_FIELD_NUMBER;
      hash = (53 * hash) + getSeatId();
      hash = (37 * hash) + OPERATE_FIELD_NUMBER;
      hash = (53 * hash) + operate_;
      hash = (37 * hash) + ROUND_CHIP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getRoundChip());
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.User parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.User parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.User parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.User parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.User parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    //-----------------------------------------------------
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.User parseFrom(byte[] data,int offset ,int length)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data,offset,length);
        }
    //-----------------------------------------------------
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.User parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    //-----------------------------------------------------
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.User parseFrom(
    		byte[] data,int offset ,int length,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data,offset,length, extensionRegistry);
        }
   //-----------------------------------------------------
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.User parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.User parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.User parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.User parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.User parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.User parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.poker.protocols.texaspoker.TexasGameReconnectProto.User prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code com.poker.protocols.texaspoker.proto.User}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.poker.protocols.texaspoker.proto.User)
        com.poker.protocols.texaspoker.TexasGameReconnectProto.UserOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.poker.protocols.texaspoker.TexasGameReconnectProto.internal_static_com_poker_protocols_texaspoker_proto_User_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.poker.protocols.texaspoker.TexasGameReconnectProto.internal_static_com_poker_protocols_texaspoker_proto_User_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.poker.protocols.texaspoker.TexasGameReconnectProto.User.class, com.poker.protocols.texaspoker.TexasGameReconnectProto.User.Builder.class);
      }

      // Construct using com.poker.protocols.texaspoker.TexasGameReconnectProto.User.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      public Builder clear() {
        super.clear();
        uid_ = 0L;

        nickName_ = "";

        headPortrait_ = "";

        chip_ = 0L;

        level_ = 0;

        seatId_ = 0;

        operate_ = 0;

        roundChip_ = 0L;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.poker.protocols.texaspoker.TexasGameReconnectProto.internal_static_com_poker_protocols_texaspoker_proto_User_descriptor;
      }

      public com.poker.protocols.texaspoker.TexasGameReconnectProto.User getDefaultInstanceForType() {
        return com.poker.protocols.texaspoker.TexasGameReconnectProto.User.getDefaultInstance();
      }

      public com.poker.protocols.texaspoker.TexasGameReconnectProto.User build() {
        com.poker.protocols.texaspoker.TexasGameReconnectProto.User result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.poker.protocols.texaspoker.TexasGameReconnectProto.User buildPartial() {
        com.poker.protocols.texaspoker.TexasGameReconnectProto.User result = new com.poker.protocols.texaspoker.TexasGameReconnectProto.User(this);
        result.uid_ = uid_;
        result.nickName_ = nickName_;
        result.headPortrait_ = headPortrait_;
        result.chip_ = chip_;
        result.level_ = level_;
        result.seatId_ = seatId_;
        result.operate_ = operate_;
        result.roundChip_ = roundChip_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.poker.protocols.texaspoker.TexasGameReconnectProto.User) {
          return mergeFrom((com.poker.protocols.texaspoker.TexasGameReconnectProto.User)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.poker.protocols.texaspoker.TexasGameReconnectProto.User other) {
        if (other == com.poker.protocols.texaspoker.TexasGameReconnectProto.User.getDefaultInstance()) return this;
        if (other.getUid() != 0L) {
          setUid(other.getUid());
        }
        if (!other.getNickName().isEmpty()) {
          nickName_ = other.nickName_;
          onChanged();
        }
        if (!other.getHeadPortrait().isEmpty()) {
          headPortrait_ = other.headPortrait_;
          onChanged();
        }
        if (other.getChip() != 0L) {
          setChip(other.getChip());
        }
        if (other.getLevel() != 0) {
          setLevel(other.getLevel());
        }
        if (other.getSeatId() != 0) {
          setSeatId(other.getSeatId());
        }
        if (other.operate_ != 0) {
          setOperateValue(other.getOperateValue());
        }
        if (other.getRoundChip() != 0L) {
          setRoundChip(other.getRoundChip());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.poker.protocols.texaspoker.TexasGameReconnectProto.User parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.poker.protocols.texaspoker.TexasGameReconnectProto.User) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private long uid_ ;
      /**
       * <code>int64 uid = 1;</code>
       */
      public long getUid() {
        return uid_;
      }
      /**
       * <code>int64 uid = 1;</code>
       */
      public Builder setUid(long value) {
        
        uid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 uid = 1;</code>
       */
      public Builder clearUid() {
        
        uid_ = 0L;
        onChanged();
        return this;
      }

      private java.lang.Object nickName_ = "";
      /**
       * <code>string nick_name = 2;</code>
       */
      public java.lang.String getNickName() {
        java.lang.Object ref = nickName_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          nickName_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string nick_name = 2;</code>
       */
      public com.google.protobuf.ByteString
          getNickNameBytes() {
        java.lang.Object ref = nickName_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          nickName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string nick_name = 2;</code>
       */
      public Builder setNickName(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        nickName_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string nick_name = 2;</code>
       */
      public Builder clearNickName() {
        
        nickName_ = getDefaultInstance().getNickName();
        onChanged();
        return this;
      }
      /**
       * <code>string nick_name = 2;</code>
       */
      public Builder setNickNameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        nickName_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object headPortrait_ = "";
      /**
       * <code>string head_portrait = 3;</code>
       */
      public java.lang.String getHeadPortrait() {
        java.lang.Object ref = headPortrait_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          headPortrait_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string head_portrait = 3;</code>
       */
      public com.google.protobuf.ByteString
          getHeadPortraitBytes() {
        java.lang.Object ref = headPortrait_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          headPortrait_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string head_portrait = 3;</code>
       */
      public Builder setHeadPortrait(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        headPortrait_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string head_portrait = 3;</code>
       */
      public Builder clearHeadPortrait() {
        
        headPortrait_ = getDefaultInstance().getHeadPortrait();
        onChanged();
        return this;
      }
      /**
       * <code>string head_portrait = 3;</code>
       */
      public Builder setHeadPortraitBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        headPortrait_ = value;
        onChanged();
        return this;
      }

      private long chip_ ;
      /**
       * <code>int64 chip = 4;</code>
       */
      public long getChip() {
        return chip_;
      }
      /**
       * <code>int64 chip = 4;</code>
       */
      public Builder setChip(long value) {
        
        chip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 chip = 4;</code>
       */
      public Builder clearChip() {
        
        chip_ = 0L;
        onChanged();
        return this;
      }

      private int level_ ;
      /**
       * <code>int32 level = 5;</code>
       */
      public int getLevel() {
        return level_;
      }
      /**
       * <code>int32 level = 5;</code>
       */
      public Builder setLevel(int value) {
        
        level_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 level = 5;</code>
       */
      public Builder clearLevel() {
        
        level_ = 0;
        onChanged();
        return this;
      }

      private int seatId_ ;
      /**
       * <code>int32 seatId = 6;</code>
       */
      public int getSeatId() {
        return seatId_;
      }
      /**
       * <code>int32 seatId = 6;</code>
       */
      public Builder setSeatId(int value) {
        
        seatId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int32 seatId = 6;</code>
       */
      public Builder clearSeatId() {
        
        seatId_ = 0;
        onChanged();
        return this;
      }

      private int operate_ = 0;
      /**
       * <code>.com.poker.protocols.texaspoker.proto.TexasGameAction.Operate operate = 7;</code>
       */
      public int getOperateValue() {
        return operate_;
      }
      /**
       * <code>.com.poker.protocols.texaspoker.proto.TexasGameAction.Operate operate = 7;</code>
       */
      public Builder setOperateValue(int value) {
        operate_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.com.poker.protocols.texaspoker.proto.TexasGameAction.Operate operate = 7;</code>
       */
      public com.poker.protocols.texaspoker.TexasGameActionProto.TexasGameAction.Operate getOperate() {
        com.poker.protocols.texaspoker.TexasGameActionProto.TexasGameAction.Operate result = com.poker.protocols.texaspoker.TexasGameActionProto.TexasGameAction.Operate.valueOf(operate_);
        return result == null ? com.poker.protocols.texaspoker.TexasGameActionProto.TexasGameAction.Operate.UNRECOGNIZED : result;
      }
      /**
       * <code>.com.poker.protocols.texaspoker.proto.TexasGameAction.Operate operate = 7;</code>
       */
      public Builder setOperate(com.poker.protocols.texaspoker.TexasGameActionProto.TexasGameAction.Operate value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        operate_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.com.poker.protocols.texaspoker.proto.TexasGameAction.Operate operate = 7;</code>
       */
      public Builder clearOperate() {
        
        operate_ = 0;
        onChanged();
        return this;
      }

      private long roundChip_ ;
      /**
       * <code>int64 round_chip = 8;</code>
       */
      public long getRoundChip() {
        return roundChip_;
      }
      /**
       * <code>int64 round_chip = 8;</code>
       */
      public Builder setRoundChip(long value) {
        
        roundChip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 round_chip = 8;</code>
       */
      public Builder clearRoundChip() {
        
        roundChip_ = 0L;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.poker.protocols.texaspoker.proto.User)
    }

    // @@protoc_insertion_point(class_scope:com.poker.protocols.texaspoker.proto.User)
    private static final com.poker.protocols.texaspoker.TexasGameReconnectProto.User DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.poker.protocols.texaspoker.TexasGameReconnectProto.User();
    }

    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.User getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<User>
        PARSER = new com.google.protobuf.AbstractParser<User>() {
      public User parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new User(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<User> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<User> getParserForType() {
      return PARSER;
    }

    public com.poker.protocols.texaspoker.TexasGameReconnectProto.User getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface TexasGameReconnectOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.poker.protocols.texaspoker.proto.TexasGameReconnect)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     *配置信息
     * </pre>
     *
     * <code>.com.poker.protocols.texaspoker.proto.Config config = 1;</code>
     */
    boolean hasConfig();
    /**
     * <pre>
     *配置信息
     * </pre>
     *
     * <code>.com.poker.protocols.texaspoker.proto.Config config = 1;</code>
     */
    com.poker.protocols.texaspoker.TexasGameStartProto.Config getConfig();
    /**
     * <pre>
     *配置信息
     * </pre>
     *
     * <code>.com.poker.protocols.texaspoker.proto.Config config = 1;</code>
     */
    com.poker.protocols.texaspoker.TexasGameStartProto.ConfigOrBuilder getConfigOrBuilder();

    /**
     * <pre>
     *自己的用户信息以及其它用户信息
     * </pre>
     *
     * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
     */
    java.util.List<com.poker.protocols.texaspoker.TexasGameReconnectProto.User> 
        getMUsersList();
    /**
     * <pre>
     *自己的用户信息以及其它用户信息
     * </pre>
     *
     * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
     */
    com.poker.protocols.texaspoker.TexasGameReconnectProto.User getMUsers(int index);
    /**
     * <pre>
     *自己的用户信息以及其它用户信息
     * </pre>
     *
     * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
     */
    int getMUsersCount();
    /**
     * <pre>
     *自己的用户信息以及其它用户信息
     * </pre>
     *
     * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
     */
    java.util.List<? extends com.poker.protocols.texaspoker.TexasGameReconnectProto.UserOrBuilder> 
        getMUsersOrBuilderList();
    /**
     * <pre>
     *自己的用户信息以及其它用户信息
     * </pre>
     *
     * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
     */
    com.poker.protocols.texaspoker.TexasGameReconnectProto.UserOrBuilder getMUsersOrBuilder(
        int index);

    /**
     * <pre>
     *桌子信息
     * </pre>
     *
     * <code>int32 table_status = 3;</code>
     */
    int getTableStatus();

    /**
     * <pre>
     *小盲桌位id
     * </pre>
     *
     * <code>int32 sb_seatId = 4;</code>
     */
    int getSbSeatId();

    /**
     * <pre>
     *大盲桌位id
     * </pre>
     *
     * <code>int32 bb_seatId = 5;</code>
     */
    int getBbSeatId();

    /**
     * <pre>
     *按钮位桌位id
     * </pre>
     *
     * <code>int32 btn_seatId = 6;</code>
     */
    int getBtnSeatId();

    /**
     * <pre>
     *底牌
     * </pre>
     *
     * <code>repeated int32 cards = 7;</code>
     */
    java.util.List<java.lang.Integer> getCardsList();
    /**
     * <pre>
     *底牌
     * </pre>
     *
     * <code>repeated int32 cards = 7;</code>
     */
    int getCardsCount();
    /**
     * <pre>
     *底牌
     * </pre>
     *
     * <code>repeated int32 cards = 7;</code>
     */
    int getCards(int index);

    /**
     * <pre>
     *底牌
     * </pre>
     *
     * <code>repeated int32 cards_flop = 8;</code>
     */
    java.util.List<java.lang.Integer> getCardsFlopList();
    /**
     * <pre>
     *底牌
     * </pre>
     *
     * <code>repeated int32 cards_flop = 8;</code>
     */
    int getCardsFlopCount();
    /**
     * <pre>
     *底牌
     * </pre>
     *
     * <code>repeated int32 cards_flop = 8;</code>
     */
    int getCardsFlop(int index);

    /**
     * <pre>
     *转牌
     * </pre>
     *
     * <code>repeated int32 cards_trun = 9;</code>
     */
    java.util.List<java.lang.Integer> getCardsTrunList();
    /**
     * <pre>
     *转牌
     * </pre>
     *
     * <code>repeated int32 cards_trun = 9;</code>
     */
    int getCardsTrunCount();
    /**
     * <pre>
     *转牌
     * </pre>
     *
     * <code>repeated int32 cards_trun = 9;</code>
     */
    int getCardsTrun(int index);

    /**
     * <pre>
     *河牌
     * </pre>
     *
     * <code>repeated int32 cards_river = 10;</code>
     */
    java.util.List<java.lang.Integer> getCardsRiverList();
    /**
     * <pre>
     *河牌
     * </pre>
     *
     * <code>repeated int32 cards_river = 10;</code>
     */
    int getCardsRiverCount();
    /**
     * <pre>
     *河牌
     * </pre>
     *
     * <code>repeated int32 cards_river = 10;</code>
     */
    int getCardsRiver(int index);

    /**
     * <pre>
     *当前操作人信息
     * </pre>
     *
     * <code>int32 next_op_seatId = 11;</code>
     */
    int getNextOpSeatId();

    /**
     * <code>int64 next_op_call_chip = 12;</code>
     */
    long getNextOpCallChip();

    /**
     * <code>int64 next_op_min_raise_chip = 13;</code>
     */
    long getNextOpMinRaiseChip();

    /**
     * <code>int64 next_op_max_raise_chip = 14;</code>
     */
    long getNextOpMaxRaiseChip();

    /**
     * <code>int64 max_round_chip = 15;</code>
     */
    long getMaxRoundChip();

    /**
     * <pre>
     *剩余的操作超时时间
     * </pre>
     *
     * <code>int32 rest_action_timeout = 16;</code>
     */
    int getRestActionTimeout();
  }
  /**
   * <pre>
   *游戏重连
   * </pre>
   *
   * Protobuf type {@code com.poker.protocols.texaspoker.proto.TexasGameReconnect}
   */
  public  static final class TexasGameReconnect extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.poker.protocols.texaspoker.proto.TexasGameReconnect)
      TexasGameReconnectOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use TexasGameReconnect.newBuilder() to construct.
    private TexasGameReconnect(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private TexasGameReconnect() {
      mUsers_ = java.util.Collections.emptyList();
      tableStatus_ = 0;
      sbSeatId_ = 0;
      bbSeatId_ = 0;
      btnSeatId_ = 0;
      cards_ = java.util.Collections.emptyList();
      cardsFlop_ = java.util.Collections.emptyList();
      cardsTrun_ = java.util.Collections.emptyList();
      cardsRiver_ = java.util.Collections.emptyList();
      nextOpSeatId_ = 0;
      nextOpCallChip_ = 0L;
      nextOpMinRaiseChip_ = 0L;
      nextOpMaxRaiseChip_ = 0L;
      maxRoundChip_ = 0L;
      restActionTimeout_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private TexasGameReconnect(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.poker.protocols.texaspoker.TexasGameStartProto.Config.Builder subBuilder = null;
              if (config_ != null) {
                subBuilder = config_.toBuilder();
              }
              config_ = input.readMessage(com.poker.protocols.texaspoker.TexasGameStartProto.Config.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(config_);
                config_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                mUsers_ = new java.util.ArrayList<com.poker.protocols.texaspoker.TexasGameReconnectProto.User>();
                mutable_bitField0_ |= 0x00000002;
              }
              mUsers_.add(
                  input.readMessage(com.poker.protocols.texaspoker.TexasGameReconnectProto.User.parser(), extensionRegistry));
              break;
            }
            case 24: {

              tableStatus_ = input.readInt32();
              break;
            }
            case 32: {

              sbSeatId_ = input.readInt32();
              break;
            }
            case 40: {

              bbSeatId_ = input.readInt32();
              break;
            }
            case 48: {

              btnSeatId_ = input.readInt32();
              break;
            }
            case 56: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              cards_.add(input.readInt32());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                cards_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                cards_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                cardsFlop_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              cardsFlop_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                cardsFlop_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsFlop_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                cardsTrun_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              cardsTrun_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                cardsTrun_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsTrun_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 80: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                cardsRiver_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              cardsRiver_.add(input.readInt32());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                cardsRiver_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                cardsRiver_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {

              nextOpSeatId_ = input.readInt32();
              break;
            }
            case 96: {

              nextOpCallChip_ = input.readInt64();
              break;
            }
            case 104: {

              nextOpMinRaiseChip_ = input.readInt64();
              break;
            }
            case 112: {

              nextOpMaxRaiseChip_ = input.readInt64();
              break;
            }
            case 120: {

              maxRoundChip_ = input.readInt64();
              break;
            }
            case 128: {

              restActionTimeout_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          mUsers_ = java.util.Collections.unmodifiableList(mUsers_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          cardsFlop_ = java.util.Collections.unmodifiableList(cardsFlop_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          cardsTrun_ = java.util.Collections.unmodifiableList(cardsTrun_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          cardsRiver_ = java.util.Collections.unmodifiableList(cardsRiver_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.poker.protocols.texaspoker.TexasGameReconnectProto.internal_static_com_poker_protocols_texaspoker_proto_TexasGameReconnect_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.poker.protocols.texaspoker.TexasGameReconnectProto.internal_static_com_poker_protocols_texaspoker_proto_TexasGameReconnect_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect.class, com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect.Builder.class);
    }

    private int bitField0_;
    public static final int CONFIG_FIELD_NUMBER = 1;
    private com.poker.protocols.texaspoker.TexasGameStartProto.Config config_;
    /**
     * <pre>
     *配置信息
     * </pre>
     *
     * <code>.com.poker.protocols.texaspoker.proto.Config config = 1;</code>
     */
    public boolean hasConfig() {
      return config_ != null;
    }
    /**
     * <pre>
     *配置信息
     * </pre>
     *
     * <code>.com.poker.protocols.texaspoker.proto.Config config = 1;</code>
     */
    public com.poker.protocols.texaspoker.TexasGameStartProto.Config getConfig() {
      return config_ == null ? com.poker.protocols.texaspoker.TexasGameStartProto.Config.getDefaultInstance() : config_;
    }
    /**
     * <pre>
     *配置信息
     * </pre>
     *
     * <code>.com.poker.protocols.texaspoker.proto.Config config = 1;</code>
     */
    public com.poker.protocols.texaspoker.TexasGameStartProto.ConfigOrBuilder getConfigOrBuilder() {
      return getConfig();
    }

    public static final int MUSERS_FIELD_NUMBER = 2;
    private java.util.List<com.poker.protocols.texaspoker.TexasGameReconnectProto.User> mUsers_;
    /**
     * <pre>
     *自己的用户信息以及其它用户信息
     * </pre>
     *
     * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
     */
    public java.util.List<com.poker.protocols.texaspoker.TexasGameReconnectProto.User> getMUsersList() {
      return mUsers_;
    }
    /**
     * <pre>
     *自己的用户信息以及其它用户信息
     * </pre>
     *
     * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
     */
    public java.util.List<? extends com.poker.protocols.texaspoker.TexasGameReconnectProto.UserOrBuilder> 
        getMUsersOrBuilderList() {
      return mUsers_;
    }
    /**
     * <pre>
     *自己的用户信息以及其它用户信息
     * </pre>
     *
     * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
     */
    public int getMUsersCount() {
      return mUsers_.size();
    }
    /**
     * <pre>
     *自己的用户信息以及其它用户信息
     * </pre>
     *
     * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
     */
    public com.poker.protocols.texaspoker.TexasGameReconnectProto.User getMUsers(int index) {
      return mUsers_.get(index);
    }
    /**
     * <pre>
     *自己的用户信息以及其它用户信息
     * </pre>
     *
     * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
     */
    public com.poker.protocols.texaspoker.TexasGameReconnectProto.UserOrBuilder getMUsersOrBuilder(
        int index) {
      return mUsers_.get(index);
    }

    public static final int TABLE_STATUS_FIELD_NUMBER = 3;
    private int tableStatus_;
    /**
     * <pre>
     *桌子信息
     * </pre>
     *
     * <code>int32 table_status = 3;</code>
     */
    public int getTableStatus() {
      return tableStatus_;
    }

    public static final int SB_SEATID_FIELD_NUMBER = 4;
    private int sbSeatId_;
    /**
     * <pre>
     *小盲桌位id
     * </pre>
     *
     * <code>int32 sb_seatId = 4;</code>
     */
    public int getSbSeatId() {
      return sbSeatId_;
    }

    public static final int BB_SEATID_FIELD_NUMBER = 5;
    private int bbSeatId_;
    /**
     * <pre>
     *大盲桌位id
     * </pre>
     *
     * <code>int32 bb_seatId = 5;</code>
     */
    public int getBbSeatId() {
      return bbSeatId_;
    }

    public static final int BTN_SEATID_FIELD_NUMBER = 6;
    private int btnSeatId_;
    /**
     * <pre>
     *按钮位桌位id
     * </pre>
     *
     * <code>int32 btn_seatId = 6;</code>
     */
    public int getBtnSeatId() {
      return btnSeatId_;
    }

    public static final int CARDS_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Integer> cards_;
    /**
     * <pre>
     *底牌
     * </pre>
     *
     * <code>repeated int32 cards = 7;</code>
     */
    public java.util.List<java.lang.Integer>
        getCardsList() {
      return cards_;
    }
    /**
     * <pre>
     *底牌
     * </pre>
     *
     * <code>repeated int32 cards = 7;</code>
     */
    public int getCardsCount() {
      return cards_.size();
    }
    /**
     * <pre>
     *底牌
     * </pre>
     *
     * <code>repeated int32 cards = 7;</code>
     */
    public int getCards(int index) {
      return cards_.get(index);
    }
    private int cardsMemoizedSerializedSize = -1;

    public static final int CARDS_FLOP_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> cardsFlop_;
    /**
     * <pre>
     *底牌
     * </pre>
     *
     * <code>repeated int32 cards_flop = 8;</code>
     */
    public java.util.List<java.lang.Integer>
        getCardsFlopList() {
      return cardsFlop_;
    }
    /**
     * <pre>
     *底牌
     * </pre>
     *
     * <code>repeated int32 cards_flop = 8;</code>
     */
    public int getCardsFlopCount() {
      return cardsFlop_.size();
    }
    /**
     * <pre>
     *底牌
     * </pre>
     *
     * <code>repeated int32 cards_flop = 8;</code>
     */
    public int getCardsFlop(int index) {
      return cardsFlop_.get(index);
    }
    private int cardsFlopMemoizedSerializedSize = -1;

    public static final int CARDS_TRUN_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> cardsTrun_;
    /**
     * <pre>
     *转牌
     * </pre>
     *
     * <code>repeated int32 cards_trun = 9;</code>
     */
    public java.util.List<java.lang.Integer>
        getCardsTrunList() {
      return cardsTrun_;
    }
    /**
     * <pre>
     *转牌
     * </pre>
     *
     * <code>repeated int32 cards_trun = 9;</code>
     */
    public int getCardsTrunCount() {
      return cardsTrun_.size();
    }
    /**
     * <pre>
     *转牌
     * </pre>
     *
     * <code>repeated int32 cards_trun = 9;</code>
     */
    public int getCardsTrun(int index) {
      return cardsTrun_.get(index);
    }
    private int cardsTrunMemoizedSerializedSize = -1;

    public static final int CARDS_RIVER_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Integer> cardsRiver_;
    /**
     * <pre>
     *河牌
     * </pre>
     *
     * <code>repeated int32 cards_river = 10;</code>
     */
    public java.util.List<java.lang.Integer>
        getCardsRiverList() {
      return cardsRiver_;
    }
    /**
     * <pre>
     *河牌
     * </pre>
     *
     * <code>repeated int32 cards_river = 10;</code>
     */
    public int getCardsRiverCount() {
      return cardsRiver_.size();
    }
    /**
     * <pre>
     *河牌
     * </pre>
     *
     * <code>repeated int32 cards_river = 10;</code>
     */
    public int getCardsRiver(int index) {
      return cardsRiver_.get(index);
    }
    private int cardsRiverMemoizedSerializedSize = -1;

    public static final int NEXT_OP_SEATID_FIELD_NUMBER = 11;
    private int nextOpSeatId_;
    /**
     * <pre>
     *当前操作人信息
     * </pre>
     *
     * <code>int32 next_op_seatId = 11;</code>
     */
    public int getNextOpSeatId() {
      return nextOpSeatId_;
    }

    public static final int NEXT_OP_CALL_CHIP_FIELD_NUMBER = 12;
    private long nextOpCallChip_;
    /**
     * <code>int64 next_op_call_chip = 12;</code>
     */
    public long getNextOpCallChip() {
      return nextOpCallChip_;
    }

    public static final int NEXT_OP_MIN_RAISE_CHIP_FIELD_NUMBER = 13;
    private long nextOpMinRaiseChip_;
    /**
     * <code>int64 next_op_min_raise_chip = 13;</code>
     */
    public long getNextOpMinRaiseChip() {
      return nextOpMinRaiseChip_;
    }

    public static final int NEXT_OP_MAX_RAISE_CHIP_FIELD_NUMBER = 14;
    private long nextOpMaxRaiseChip_;
    /**
     * <code>int64 next_op_max_raise_chip = 14;</code>
     */
    public long getNextOpMaxRaiseChip() {
      return nextOpMaxRaiseChip_;
    }

    public static final int MAX_ROUND_CHIP_FIELD_NUMBER = 15;
    private long maxRoundChip_;
    /**
     * <code>int64 max_round_chip = 15;</code>
     */
    public long getMaxRoundChip() {
      return maxRoundChip_;
    }

    public static final int REST_ACTION_TIMEOUT_FIELD_NUMBER = 16;
    private int restActionTimeout_;
    /**
     * <pre>
     *剩余的操作超时时间
     * </pre>
     *
     * <code>int32 rest_action_timeout = 16;</code>
     */
    public int getRestActionTimeout() {
      return restActionTimeout_;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (config_ != null) {
        output.writeMessage(1, getConfig());
      }
      for (int i = 0; i < mUsers_.size(); i++) {
        output.writeMessage(2, mUsers_.get(i));
      }
      if (tableStatus_ != 0) {
        output.writeInt32(3, tableStatus_);
      }
      if (sbSeatId_ != 0) {
        output.writeInt32(4, sbSeatId_);
      }
      if (bbSeatId_ != 0) {
        output.writeInt32(5, bbSeatId_);
      }
      if (btnSeatId_ != 0) {
        output.writeInt32(6, btnSeatId_);
      }
      if (getCardsList().size() > 0) {
        output.writeUInt32NoTag(58);
        output.writeUInt32NoTag(cardsMemoizedSerializedSize);
      }
      for (int i = 0; i < cards_.size(); i++) {
        output.writeInt32NoTag(cards_.get(i));
      }
      if (getCardsFlopList().size() > 0) {
        output.writeUInt32NoTag(66);
        output.writeUInt32NoTag(cardsFlopMemoizedSerializedSize);
      }
      for (int i = 0; i < cardsFlop_.size(); i++) {
        output.writeInt32NoTag(cardsFlop_.get(i));
      }
      if (getCardsTrunList().size() > 0) {
        output.writeUInt32NoTag(74);
        output.writeUInt32NoTag(cardsTrunMemoizedSerializedSize);
      }
      for (int i = 0; i < cardsTrun_.size(); i++) {
        output.writeInt32NoTag(cardsTrun_.get(i));
      }
      if (getCardsRiverList().size() > 0) {
        output.writeUInt32NoTag(82);
        output.writeUInt32NoTag(cardsRiverMemoizedSerializedSize);
      }
      for (int i = 0; i < cardsRiver_.size(); i++) {
        output.writeInt32NoTag(cardsRiver_.get(i));
      }
      if (nextOpSeatId_ != 0) {
        output.writeInt32(11, nextOpSeatId_);
      }
      if (nextOpCallChip_ != 0L) {
        output.writeInt64(12, nextOpCallChip_);
      }
      if (nextOpMinRaiseChip_ != 0L) {
        output.writeInt64(13, nextOpMinRaiseChip_);
      }
      if (nextOpMaxRaiseChip_ != 0L) {
        output.writeInt64(14, nextOpMaxRaiseChip_);
      }
      if (maxRoundChip_ != 0L) {
        output.writeInt64(15, maxRoundChip_);
      }
      if (restActionTimeout_ != 0) {
        output.writeInt32(16, restActionTimeout_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (config_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getConfig());
      }
      for (int i = 0; i < mUsers_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, mUsers_.get(i));
      }
      if (tableStatus_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, tableStatus_);
      }
      if (sbSeatId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, sbSeatId_);
      }
      if (bbSeatId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, bbSeatId_);
      }
      if (btnSeatId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, btnSeatId_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cards_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cards_.get(i));
        }
        size += dataSize;
        if (!getCardsList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        cardsMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsFlop_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsFlop_.get(i));
        }
        size += dataSize;
        if (!getCardsFlopList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        cardsFlopMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsTrun_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsTrun_.get(i));
        }
        size += dataSize;
        if (!getCardsTrunList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        cardsTrunMemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        for (int i = 0; i < cardsRiver_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(cardsRiver_.get(i));
        }
        size += dataSize;
        if (!getCardsRiverList().isEmpty()) {
          size += 1;
          size += com.google.protobuf.CodedOutputStream
              .computeInt32SizeNoTag(dataSize);
        }
        cardsRiverMemoizedSerializedSize = dataSize;
      }
      if (nextOpSeatId_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, nextOpSeatId_);
      }
      if (nextOpCallChip_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(12, nextOpCallChip_);
      }
      if (nextOpMinRaiseChip_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(13, nextOpMinRaiseChip_);
      }
      if (nextOpMaxRaiseChip_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(14, nextOpMaxRaiseChip_);
      }
      if (maxRoundChip_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(15, maxRoundChip_);
      }
      if (restActionTimeout_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(16, restActionTimeout_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect)) {
        return super.equals(obj);
      }
      com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect other = (com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect) obj;

      boolean result = true;
      result = result && (hasConfig() == other.hasConfig());
      if (hasConfig()) {
        result = result && getConfig()
            .equals(other.getConfig());
      }
      result = result && getMUsersList()
          .equals(other.getMUsersList());
      result = result && (getTableStatus()
          == other.getTableStatus());
      result = result && (getSbSeatId()
          == other.getSbSeatId());
      result = result && (getBbSeatId()
          == other.getBbSeatId());
      result = result && (getBtnSeatId()
          == other.getBtnSeatId());
      result = result && getCardsList()
          .equals(other.getCardsList());
      result = result && getCardsFlopList()
          .equals(other.getCardsFlopList());
      result = result && getCardsTrunList()
          .equals(other.getCardsTrunList());
      result = result && getCardsRiverList()
          .equals(other.getCardsRiverList());
      result = result && (getNextOpSeatId()
          == other.getNextOpSeatId());
      result = result && (getNextOpCallChip()
          == other.getNextOpCallChip());
      result = result && (getNextOpMinRaiseChip()
          == other.getNextOpMinRaiseChip());
      result = result && (getNextOpMaxRaiseChip()
          == other.getNextOpMaxRaiseChip());
      result = result && (getMaxRoundChip()
          == other.getMaxRoundChip());
      result = result && (getRestActionTimeout()
          == other.getRestActionTimeout());
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasConfig()) {
        hash = (37 * hash) + CONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getConfig().hashCode();
      }
      if (getMUsersCount() > 0) {
        hash = (37 * hash) + MUSERS_FIELD_NUMBER;
        hash = (53 * hash) + getMUsersList().hashCode();
      }
      hash = (37 * hash) + TABLE_STATUS_FIELD_NUMBER;
      hash = (53 * hash) + getTableStatus();
      hash = (37 * hash) + SB_SEATID_FIELD_NUMBER;
      hash = (53 * hash) + getSbSeatId();
      hash = (37 * hash) + BB_SEATID_FIELD_NUMBER;
      hash = (53 * hash) + getBbSeatId();
      hash = (37 * hash) + BTN_SEATID_FIELD_NUMBER;
      hash = (53 * hash) + getBtnSeatId();
      if (getCardsCount() > 0) {
        hash = (37 * hash) + CARDS_FIELD_NUMBER;
        hash = (53 * hash) + getCardsList().hashCode();
      }
      if (getCardsFlopCount() > 0) {
        hash = (37 * hash) + CARDS_FLOP_FIELD_NUMBER;
        hash = (53 * hash) + getCardsFlopList().hashCode();
      }
      if (getCardsTrunCount() > 0) {
        hash = (37 * hash) + CARDS_TRUN_FIELD_NUMBER;
        hash = (53 * hash) + getCardsTrunList().hashCode();
      }
      if (getCardsRiverCount() > 0) {
        hash = (37 * hash) + CARDS_RIVER_FIELD_NUMBER;
        hash = (53 * hash) + getCardsRiverList().hashCode();
      }
      hash = (37 * hash) + NEXT_OP_SEATID_FIELD_NUMBER;
      hash = (53 * hash) + getNextOpSeatId();
      hash = (37 * hash) + NEXT_OP_CALL_CHIP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNextOpCallChip());
      hash = (37 * hash) + NEXT_OP_MIN_RAISE_CHIP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNextOpMinRaiseChip());
      hash = (37 * hash) + NEXT_OP_MAX_RAISE_CHIP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNextOpMaxRaiseChip());
      hash = (37 * hash) + MAX_ROUND_CHIP_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getMaxRoundChip());
      hash = (37 * hash) + REST_ACTION_TIMEOUT_FIELD_NUMBER;
      hash = (53 * hash) + getRestActionTimeout();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    //-----------------------------------------------------
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect parseFrom(byte[] data,int offset ,int length)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data,offset,length);
        }
    //-----------------------------------------------------
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    //-----------------------------------------------------
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect parseFrom(
    		byte[] data,int offset ,int length,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data,offset,length, extensionRegistry);
        }
   //-----------------------------------------------------
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     *游戏重连
     * </pre>
     *
     * Protobuf type {@code com.poker.protocols.texaspoker.proto.TexasGameReconnect}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.poker.protocols.texaspoker.proto.TexasGameReconnect)
        com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnectOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.poker.protocols.texaspoker.TexasGameReconnectProto.internal_static_com_poker_protocols_texaspoker_proto_TexasGameReconnect_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.poker.protocols.texaspoker.TexasGameReconnectProto.internal_static_com_poker_protocols_texaspoker_proto_TexasGameReconnect_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect.class, com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect.Builder.class);
      }

      // Construct using com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getMUsersFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (configBuilder_ == null) {
          config_ = null;
        } else {
          config_ = null;
          configBuilder_ = null;
        }
        if (mUsersBuilder_ == null) {
          mUsers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          mUsersBuilder_.clear();
        }
        tableStatus_ = 0;

        sbSeatId_ = 0;

        bbSeatId_ = 0;

        btnSeatId_ = 0;

        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        cardsFlop_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        cardsTrun_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        cardsRiver_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        nextOpSeatId_ = 0;

        nextOpCallChip_ = 0L;

        nextOpMinRaiseChip_ = 0L;

        nextOpMaxRaiseChip_ = 0L;

        maxRoundChip_ = 0L;

        restActionTimeout_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.poker.protocols.texaspoker.TexasGameReconnectProto.internal_static_com_poker_protocols_texaspoker_proto_TexasGameReconnect_descriptor;
      }

      public com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect getDefaultInstanceForType() {
        return com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect.getDefaultInstance();
      }

      public com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect build() {
        com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect buildPartial() {
        com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect result = new com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (configBuilder_ == null) {
          result.config_ = config_;
        } else {
          result.config_ = configBuilder_.build();
        }
        if (mUsersBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            mUsers_ = java.util.Collections.unmodifiableList(mUsers_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.mUsers_ = mUsers_;
        } else {
          result.mUsers_ = mUsersBuilder_.build();
        }
        result.tableStatus_ = tableStatus_;
        result.sbSeatId_ = sbSeatId_;
        result.bbSeatId_ = bbSeatId_;
        result.btnSeatId_ = btnSeatId_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          cards_ = java.util.Collections.unmodifiableList(cards_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.cards_ = cards_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          cardsFlop_ = java.util.Collections.unmodifiableList(cardsFlop_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.cardsFlop_ = cardsFlop_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          cardsTrun_ = java.util.Collections.unmodifiableList(cardsTrun_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.cardsTrun_ = cardsTrun_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          cardsRiver_ = java.util.Collections.unmodifiableList(cardsRiver_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.cardsRiver_ = cardsRiver_;
        result.nextOpSeatId_ = nextOpSeatId_;
        result.nextOpCallChip_ = nextOpCallChip_;
        result.nextOpMinRaiseChip_ = nextOpMinRaiseChip_;
        result.nextOpMaxRaiseChip_ = nextOpMaxRaiseChip_;
        result.maxRoundChip_ = maxRoundChip_;
        result.restActionTimeout_ = restActionTimeout_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect) {
          return mergeFrom((com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect other) {
        if (other == com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect.getDefaultInstance()) return this;
        if (other.hasConfig()) {
          mergeConfig(other.getConfig());
        }
        if (mUsersBuilder_ == null) {
          if (!other.mUsers_.isEmpty()) {
            if (mUsers_.isEmpty()) {
              mUsers_ = other.mUsers_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureMUsersIsMutable();
              mUsers_.addAll(other.mUsers_);
            }
            onChanged();
          }
        } else {
          if (!other.mUsers_.isEmpty()) {
            if (mUsersBuilder_.isEmpty()) {
              mUsersBuilder_.dispose();
              mUsersBuilder_ = null;
              mUsers_ = other.mUsers_;
              bitField0_ = (bitField0_ & ~0x00000002);
              mUsersBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getMUsersFieldBuilder() : null;
            } else {
              mUsersBuilder_.addAllMessages(other.mUsers_);
            }
          }
        }
        if (other.getTableStatus() != 0) {
          setTableStatus(other.getTableStatus());
        }
        if (other.getSbSeatId() != 0) {
          setSbSeatId(other.getSbSeatId());
        }
        if (other.getBbSeatId() != 0) {
          setBbSeatId(other.getBbSeatId());
        }
        if (other.getBtnSeatId() != 0) {
          setBtnSeatId(other.getBtnSeatId());
        }
        if (!other.cards_.isEmpty()) {
          if (cards_.isEmpty()) {
            cards_ = other.cards_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureCardsIsMutable();
            cards_.addAll(other.cards_);
          }
          onChanged();
        }
        if (!other.cardsFlop_.isEmpty()) {
          if (cardsFlop_.isEmpty()) {
            cardsFlop_ = other.cardsFlop_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureCardsFlopIsMutable();
            cardsFlop_.addAll(other.cardsFlop_);
          }
          onChanged();
        }
        if (!other.cardsTrun_.isEmpty()) {
          if (cardsTrun_.isEmpty()) {
            cardsTrun_ = other.cardsTrun_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureCardsTrunIsMutable();
            cardsTrun_.addAll(other.cardsTrun_);
          }
          onChanged();
        }
        if (!other.cardsRiver_.isEmpty()) {
          if (cardsRiver_.isEmpty()) {
            cardsRiver_ = other.cardsRiver_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureCardsRiverIsMutable();
            cardsRiver_.addAll(other.cardsRiver_);
          }
          onChanged();
        }
        if (other.getNextOpSeatId() != 0) {
          setNextOpSeatId(other.getNextOpSeatId());
        }
        if (other.getNextOpCallChip() != 0L) {
          setNextOpCallChip(other.getNextOpCallChip());
        }
        if (other.getNextOpMinRaiseChip() != 0L) {
          setNextOpMinRaiseChip(other.getNextOpMinRaiseChip());
        }
        if (other.getNextOpMaxRaiseChip() != 0L) {
          setNextOpMaxRaiseChip(other.getNextOpMaxRaiseChip());
        }
        if (other.getMaxRoundChip() != 0L) {
          setMaxRoundChip(other.getMaxRoundChip());
        }
        if (other.getRestActionTimeout() != 0) {
          setRestActionTimeout(other.getRestActionTimeout());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.poker.protocols.texaspoker.TexasGameStartProto.Config config_ = null;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.poker.protocols.texaspoker.TexasGameStartProto.Config, com.poker.protocols.texaspoker.TexasGameStartProto.Config.Builder, com.poker.protocols.texaspoker.TexasGameStartProto.ConfigOrBuilder> configBuilder_;
      /**
       * <pre>
       *配置信息
       * </pre>
       *
       * <code>.com.poker.protocols.texaspoker.proto.Config config = 1;</code>
       */
      public boolean hasConfig() {
        return configBuilder_ != null || config_ != null;
      }
      /**
       * <pre>
       *配置信息
       * </pre>
       *
       * <code>.com.poker.protocols.texaspoker.proto.Config config = 1;</code>
       */
      public com.poker.protocols.texaspoker.TexasGameStartProto.Config getConfig() {
        if (configBuilder_ == null) {
          return config_ == null ? com.poker.protocols.texaspoker.TexasGameStartProto.Config.getDefaultInstance() : config_;
        } else {
          return configBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       *配置信息
       * </pre>
       *
       * <code>.com.poker.protocols.texaspoker.proto.Config config = 1;</code>
       */
      public Builder setConfig(com.poker.protocols.texaspoker.TexasGameStartProto.Config value) {
        if (configBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          config_ = value;
          onChanged();
        } else {
          configBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       *配置信息
       * </pre>
       *
       * <code>.com.poker.protocols.texaspoker.proto.Config config = 1;</code>
       */
      public Builder setConfig(
          com.poker.protocols.texaspoker.TexasGameStartProto.Config.Builder builderForValue) {
        if (configBuilder_ == null) {
          config_ = builderForValue.build();
          onChanged();
        } else {
          configBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       *配置信息
       * </pre>
       *
       * <code>.com.poker.protocols.texaspoker.proto.Config config = 1;</code>
       */
      public Builder mergeConfig(com.poker.protocols.texaspoker.TexasGameStartProto.Config value) {
        if (configBuilder_ == null) {
          if (config_ != null) {
            config_ =
              com.poker.protocols.texaspoker.TexasGameStartProto.Config.newBuilder(config_).mergeFrom(value).buildPartial();
          } else {
            config_ = value;
          }
          onChanged();
        } else {
          configBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       *配置信息
       * </pre>
       *
       * <code>.com.poker.protocols.texaspoker.proto.Config config = 1;</code>
       */
      public Builder clearConfig() {
        if (configBuilder_ == null) {
          config_ = null;
          onChanged();
        } else {
          config_ = null;
          configBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       *配置信息
       * </pre>
       *
       * <code>.com.poker.protocols.texaspoker.proto.Config config = 1;</code>
       */
      public com.poker.protocols.texaspoker.TexasGameStartProto.Config.Builder getConfigBuilder() {
        
        onChanged();
        return getConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       *配置信息
       * </pre>
       *
       * <code>.com.poker.protocols.texaspoker.proto.Config config = 1;</code>
       */
      public com.poker.protocols.texaspoker.TexasGameStartProto.ConfigOrBuilder getConfigOrBuilder() {
        if (configBuilder_ != null) {
          return configBuilder_.getMessageOrBuilder();
        } else {
          return config_ == null ?
              com.poker.protocols.texaspoker.TexasGameStartProto.Config.getDefaultInstance() : config_;
        }
      }
      /**
       * <pre>
       *配置信息
       * </pre>
       *
       * <code>.com.poker.protocols.texaspoker.proto.Config config = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.poker.protocols.texaspoker.TexasGameStartProto.Config, com.poker.protocols.texaspoker.TexasGameStartProto.Config.Builder, com.poker.protocols.texaspoker.TexasGameStartProto.ConfigOrBuilder> 
          getConfigFieldBuilder() {
        if (configBuilder_ == null) {
          configBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.poker.protocols.texaspoker.TexasGameStartProto.Config, com.poker.protocols.texaspoker.TexasGameStartProto.Config.Builder, com.poker.protocols.texaspoker.TexasGameStartProto.ConfigOrBuilder>(
                  getConfig(),
                  getParentForChildren(),
                  isClean());
          config_ = null;
        }
        return configBuilder_;
      }

      private java.util.List<com.poker.protocols.texaspoker.TexasGameReconnectProto.User> mUsers_ =
        java.util.Collections.emptyList();
      private void ensureMUsersIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          mUsers_ = new java.util.ArrayList<com.poker.protocols.texaspoker.TexasGameReconnectProto.User>(mUsers_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.poker.protocols.texaspoker.TexasGameReconnectProto.User, com.poker.protocols.texaspoker.TexasGameReconnectProto.User.Builder, com.poker.protocols.texaspoker.TexasGameReconnectProto.UserOrBuilder> mUsersBuilder_;

      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public java.util.List<com.poker.protocols.texaspoker.TexasGameReconnectProto.User> getMUsersList() {
        if (mUsersBuilder_ == null) {
          return java.util.Collections.unmodifiableList(mUsers_);
        } else {
          return mUsersBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public int getMUsersCount() {
        if (mUsersBuilder_ == null) {
          return mUsers_.size();
        } else {
          return mUsersBuilder_.getCount();
        }
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public com.poker.protocols.texaspoker.TexasGameReconnectProto.User getMUsers(int index) {
        if (mUsersBuilder_ == null) {
          return mUsers_.get(index);
        } else {
          return mUsersBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public Builder setMUsers(
          int index, com.poker.protocols.texaspoker.TexasGameReconnectProto.User value) {
        if (mUsersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMUsersIsMutable();
          mUsers_.set(index, value);
          onChanged();
        } else {
          mUsersBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public Builder setMUsers(
          int index, com.poker.protocols.texaspoker.TexasGameReconnectProto.User.Builder builderForValue) {
        if (mUsersBuilder_ == null) {
          ensureMUsersIsMutable();
          mUsers_.set(index, builderForValue.build());
          onChanged();
        } else {
          mUsersBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public Builder addMUsers(com.poker.protocols.texaspoker.TexasGameReconnectProto.User value) {
        if (mUsersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMUsersIsMutable();
          mUsers_.add(value);
          onChanged();
        } else {
          mUsersBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public Builder addMUsers(
          int index, com.poker.protocols.texaspoker.TexasGameReconnectProto.User value) {
        if (mUsersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureMUsersIsMutable();
          mUsers_.add(index, value);
          onChanged();
        } else {
          mUsersBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public Builder addMUsers(
          com.poker.protocols.texaspoker.TexasGameReconnectProto.User.Builder builderForValue) {
        if (mUsersBuilder_ == null) {
          ensureMUsersIsMutable();
          mUsers_.add(builderForValue.build());
          onChanged();
        } else {
          mUsersBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public Builder addMUsers(
          int index, com.poker.protocols.texaspoker.TexasGameReconnectProto.User.Builder builderForValue) {
        if (mUsersBuilder_ == null) {
          ensureMUsersIsMutable();
          mUsers_.add(index, builderForValue.build());
          onChanged();
        } else {
          mUsersBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public Builder addAllMUsers(
          java.lang.Iterable<? extends com.poker.protocols.texaspoker.TexasGameReconnectProto.User> values) {
        if (mUsersBuilder_ == null) {
          ensureMUsersIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, mUsers_);
          onChanged();
        } else {
          mUsersBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public Builder clearMUsers() {
        if (mUsersBuilder_ == null) {
          mUsers_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          mUsersBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public Builder removeMUsers(int index) {
        if (mUsersBuilder_ == null) {
          ensureMUsersIsMutable();
          mUsers_.remove(index);
          onChanged();
        } else {
          mUsersBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public com.poker.protocols.texaspoker.TexasGameReconnectProto.User.Builder getMUsersBuilder(
          int index) {
        return getMUsersFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public com.poker.protocols.texaspoker.TexasGameReconnectProto.UserOrBuilder getMUsersOrBuilder(
          int index) {
        if (mUsersBuilder_ == null) {
          return mUsers_.get(index);  } else {
          return mUsersBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public java.util.List<? extends com.poker.protocols.texaspoker.TexasGameReconnectProto.UserOrBuilder> 
           getMUsersOrBuilderList() {
        if (mUsersBuilder_ != null) {
          return mUsersBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(mUsers_);
        }
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public com.poker.protocols.texaspoker.TexasGameReconnectProto.User.Builder addMUsersBuilder() {
        return getMUsersFieldBuilder().addBuilder(
            com.poker.protocols.texaspoker.TexasGameReconnectProto.User.getDefaultInstance());
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public com.poker.protocols.texaspoker.TexasGameReconnectProto.User.Builder addMUsersBuilder(
          int index) {
        return getMUsersFieldBuilder().addBuilder(
            index, com.poker.protocols.texaspoker.TexasGameReconnectProto.User.getDefaultInstance());
      }
      /**
       * <pre>
       *自己的用户信息以及其它用户信息
       * </pre>
       *
       * <code>repeated .com.poker.protocols.texaspoker.proto.User mUsers = 2;</code>
       */
      public java.util.List<com.poker.protocols.texaspoker.TexasGameReconnectProto.User.Builder> 
           getMUsersBuilderList() {
        return getMUsersFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.poker.protocols.texaspoker.TexasGameReconnectProto.User, com.poker.protocols.texaspoker.TexasGameReconnectProto.User.Builder, com.poker.protocols.texaspoker.TexasGameReconnectProto.UserOrBuilder> 
          getMUsersFieldBuilder() {
        if (mUsersBuilder_ == null) {
          mUsersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.poker.protocols.texaspoker.TexasGameReconnectProto.User, com.poker.protocols.texaspoker.TexasGameReconnectProto.User.Builder, com.poker.protocols.texaspoker.TexasGameReconnectProto.UserOrBuilder>(
                  mUsers_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          mUsers_ = null;
        }
        return mUsersBuilder_;
      }

      private int tableStatus_ ;
      /**
       * <pre>
       *桌子信息
       * </pre>
       *
       * <code>int32 table_status = 3;</code>
       */
      public int getTableStatus() {
        return tableStatus_;
      }
      /**
       * <pre>
       *桌子信息
       * </pre>
       *
       * <code>int32 table_status = 3;</code>
       */
      public Builder setTableStatus(int value) {
        
        tableStatus_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *桌子信息
       * </pre>
       *
       * <code>int32 table_status = 3;</code>
       */
      public Builder clearTableStatus() {
        
        tableStatus_ = 0;
        onChanged();
        return this;
      }

      private int sbSeatId_ ;
      /**
       * <pre>
       *小盲桌位id
       * </pre>
       *
       * <code>int32 sb_seatId = 4;</code>
       */
      public int getSbSeatId() {
        return sbSeatId_;
      }
      /**
       * <pre>
       *小盲桌位id
       * </pre>
       *
       * <code>int32 sb_seatId = 4;</code>
       */
      public Builder setSbSeatId(int value) {
        
        sbSeatId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *小盲桌位id
       * </pre>
       *
       * <code>int32 sb_seatId = 4;</code>
       */
      public Builder clearSbSeatId() {
        
        sbSeatId_ = 0;
        onChanged();
        return this;
      }

      private int bbSeatId_ ;
      /**
       * <pre>
       *大盲桌位id
       * </pre>
       *
       * <code>int32 bb_seatId = 5;</code>
       */
      public int getBbSeatId() {
        return bbSeatId_;
      }
      /**
       * <pre>
       *大盲桌位id
       * </pre>
       *
       * <code>int32 bb_seatId = 5;</code>
       */
      public Builder setBbSeatId(int value) {
        
        bbSeatId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *大盲桌位id
       * </pre>
       *
       * <code>int32 bb_seatId = 5;</code>
       */
      public Builder clearBbSeatId() {
        
        bbSeatId_ = 0;
        onChanged();
        return this;
      }

      private int btnSeatId_ ;
      /**
       * <pre>
       *按钮位桌位id
       * </pre>
       *
       * <code>int32 btn_seatId = 6;</code>
       */
      public int getBtnSeatId() {
        return btnSeatId_;
      }
      /**
       * <pre>
       *按钮位桌位id
       * </pre>
       *
       * <code>int32 btn_seatId = 6;</code>
       */
      public Builder setBtnSeatId(int value) {
        
        btnSeatId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *按钮位桌位id
       * </pre>
       *
       * <code>int32 btn_seatId = 6;</code>
       */
      public Builder clearBtnSeatId() {
        
        btnSeatId_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> cards_ = java.util.Collections.emptyList();
      private void ensureCardsIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          cards_ = new java.util.ArrayList<java.lang.Integer>(cards_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <pre>
       *底牌
       * </pre>
       *
       * <code>repeated int32 cards = 7;</code>
       */
      public java.util.List<java.lang.Integer>
          getCardsList() {
        return java.util.Collections.unmodifiableList(cards_);
      }
      /**
       * <pre>
       *底牌
       * </pre>
       *
       * <code>repeated int32 cards = 7;</code>
       */
      public int getCardsCount() {
        return cards_.size();
      }
      /**
       * <pre>
       *底牌
       * </pre>
       *
       * <code>repeated int32 cards = 7;</code>
       */
      public int getCards(int index) {
        return cards_.get(index);
      }
      /**
       * <pre>
       *底牌
       * </pre>
       *
       * <code>repeated int32 cards = 7;</code>
       */
      public Builder setCards(
          int index, int value) {
        ensureCardsIsMutable();
        cards_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *底牌
       * </pre>
       *
       * <code>repeated int32 cards = 7;</code>
       */
      public Builder addCards(int value) {
        ensureCardsIsMutable();
        cards_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *底牌
       * </pre>
       *
       * <code>repeated int32 cards = 7;</code>
       */
      public Builder addAllCards(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, cards_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *底牌
       * </pre>
       *
       * <code>repeated int32 cards = 7;</code>
       */
      public Builder clearCards() {
        cards_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> cardsFlop_ = java.util.Collections.emptyList();
      private void ensureCardsFlopIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          cardsFlop_ = new java.util.ArrayList<java.lang.Integer>(cardsFlop_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <pre>
       *底牌
       * </pre>
       *
       * <code>repeated int32 cards_flop = 8;</code>
       */
      public java.util.List<java.lang.Integer>
          getCardsFlopList() {
        return java.util.Collections.unmodifiableList(cardsFlop_);
      }
      /**
       * <pre>
       *底牌
       * </pre>
       *
       * <code>repeated int32 cards_flop = 8;</code>
       */
      public int getCardsFlopCount() {
        return cardsFlop_.size();
      }
      /**
       * <pre>
       *底牌
       * </pre>
       *
       * <code>repeated int32 cards_flop = 8;</code>
       */
      public int getCardsFlop(int index) {
        return cardsFlop_.get(index);
      }
      /**
       * <pre>
       *底牌
       * </pre>
       *
       * <code>repeated int32 cards_flop = 8;</code>
       */
      public Builder setCardsFlop(
          int index, int value) {
        ensureCardsFlopIsMutable();
        cardsFlop_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *底牌
       * </pre>
       *
       * <code>repeated int32 cards_flop = 8;</code>
       */
      public Builder addCardsFlop(int value) {
        ensureCardsFlopIsMutable();
        cardsFlop_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *底牌
       * </pre>
       *
       * <code>repeated int32 cards_flop = 8;</code>
       */
      public Builder addAllCardsFlop(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsFlopIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, cardsFlop_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *底牌
       * </pre>
       *
       * <code>repeated int32 cards_flop = 8;</code>
       */
      public Builder clearCardsFlop() {
        cardsFlop_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> cardsTrun_ = java.util.Collections.emptyList();
      private void ensureCardsTrunIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          cardsTrun_ = new java.util.ArrayList<java.lang.Integer>(cardsTrun_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <pre>
       *转牌
       * </pre>
       *
       * <code>repeated int32 cards_trun = 9;</code>
       */
      public java.util.List<java.lang.Integer>
          getCardsTrunList() {
        return java.util.Collections.unmodifiableList(cardsTrun_);
      }
      /**
       * <pre>
       *转牌
       * </pre>
       *
       * <code>repeated int32 cards_trun = 9;</code>
       */
      public int getCardsTrunCount() {
        return cardsTrun_.size();
      }
      /**
       * <pre>
       *转牌
       * </pre>
       *
       * <code>repeated int32 cards_trun = 9;</code>
       */
      public int getCardsTrun(int index) {
        return cardsTrun_.get(index);
      }
      /**
       * <pre>
       *转牌
       * </pre>
       *
       * <code>repeated int32 cards_trun = 9;</code>
       */
      public Builder setCardsTrun(
          int index, int value) {
        ensureCardsTrunIsMutable();
        cardsTrun_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *转牌
       * </pre>
       *
       * <code>repeated int32 cards_trun = 9;</code>
       */
      public Builder addCardsTrun(int value) {
        ensureCardsTrunIsMutable();
        cardsTrun_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *转牌
       * </pre>
       *
       * <code>repeated int32 cards_trun = 9;</code>
       */
      public Builder addAllCardsTrun(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsTrunIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, cardsTrun_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *转牌
       * </pre>
       *
       * <code>repeated int32 cards_trun = 9;</code>
       */
      public Builder clearCardsTrun() {
        cardsTrun_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> cardsRiver_ = java.util.Collections.emptyList();
      private void ensureCardsRiverIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          cardsRiver_ = new java.util.ArrayList<java.lang.Integer>(cardsRiver_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <pre>
       *河牌
       * </pre>
       *
       * <code>repeated int32 cards_river = 10;</code>
       */
      public java.util.List<java.lang.Integer>
          getCardsRiverList() {
        return java.util.Collections.unmodifiableList(cardsRiver_);
      }
      /**
       * <pre>
       *河牌
       * </pre>
       *
       * <code>repeated int32 cards_river = 10;</code>
       */
      public int getCardsRiverCount() {
        return cardsRiver_.size();
      }
      /**
       * <pre>
       *河牌
       * </pre>
       *
       * <code>repeated int32 cards_river = 10;</code>
       */
      public int getCardsRiver(int index) {
        return cardsRiver_.get(index);
      }
      /**
       * <pre>
       *河牌
       * </pre>
       *
       * <code>repeated int32 cards_river = 10;</code>
       */
      public Builder setCardsRiver(
          int index, int value) {
        ensureCardsRiverIsMutable();
        cardsRiver_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *河牌
       * </pre>
       *
       * <code>repeated int32 cards_river = 10;</code>
       */
      public Builder addCardsRiver(int value) {
        ensureCardsRiverIsMutable();
        cardsRiver_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *河牌
       * </pre>
       *
       * <code>repeated int32 cards_river = 10;</code>
       */
      public Builder addAllCardsRiver(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCardsRiverIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, cardsRiver_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       *河牌
       * </pre>
       *
       * <code>repeated int32 cards_river = 10;</code>
       */
      public Builder clearCardsRiver() {
        cardsRiver_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      private int nextOpSeatId_ ;
      /**
       * <pre>
       *当前操作人信息
       * </pre>
       *
       * <code>int32 next_op_seatId = 11;</code>
       */
      public int getNextOpSeatId() {
        return nextOpSeatId_;
      }
      /**
       * <pre>
       *当前操作人信息
       * </pre>
       *
       * <code>int32 next_op_seatId = 11;</code>
       */
      public Builder setNextOpSeatId(int value) {
        
        nextOpSeatId_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *当前操作人信息
       * </pre>
       *
       * <code>int32 next_op_seatId = 11;</code>
       */
      public Builder clearNextOpSeatId() {
        
        nextOpSeatId_ = 0;
        onChanged();
        return this;
      }

      private long nextOpCallChip_ ;
      /**
       * <code>int64 next_op_call_chip = 12;</code>
       */
      public long getNextOpCallChip() {
        return nextOpCallChip_;
      }
      /**
       * <code>int64 next_op_call_chip = 12;</code>
       */
      public Builder setNextOpCallChip(long value) {
        
        nextOpCallChip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 next_op_call_chip = 12;</code>
       */
      public Builder clearNextOpCallChip() {
        
        nextOpCallChip_ = 0L;
        onChanged();
        return this;
      }

      private long nextOpMinRaiseChip_ ;
      /**
       * <code>int64 next_op_min_raise_chip = 13;</code>
       */
      public long getNextOpMinRaiseChip() {
        return nextOpMinRaiseChip_;
      }
      /**
       * <code>int64 next_op_min_raise_chip = 13;</code>
       */
      public Builder setNextOpMinRaiseChip(long value) {
        
        nextOpMinRaiseChip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 next_op_min_raise_chip = 13;</code>
       */
      public Builder clearNextOpMinRaiseChip() {
        
        nextOpMinRaiseChip_ = 0L;
        onChanged();
        return this;
      }

      private long nextOpMaxRaiseChip_ ;
      /**
       * <code>int64 next_op_max_raise_chip = 14;</code>
       */
      public long getNextOpMaxRaiseChip() {
        return nextOpMaxRaiseChip_;
      }
      /**
       * <code>int64 next_op_max_raise_chip = 14;</code>
       */
      public Builder setNextOpMaxRaiseChip(long value) {
        
        nextOpMaxRaiseChip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 next_op_max_raise_chip = 14;</code>
       */
      public Builder clearNextOpMaxRaiseChip() {
        
        nextOpMaxRaiseChip_ = 0L;
        onChanged();
        return this;
      }

      private long maxRoundChip_ ;
      /**
       * <code>int64 max_round_chip = 15;</code>
       */
      public long getMaxRoundChip() {
        return maxRoundChip_;
      }
      /**
       * <code>int64 max_round_chip = 15;</code>
       */
      public Builder setMaxRoundChip(long value) {
        
        maxRoundChip_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>int64 max_round_chip = 15;</code>
       */
      public Builder clearMaxRoundChip() {
        
        maxRoundChip_ = 0L;
        onChanged();
        return this;
      }

      private int restActionTimeout_ ;
      /**
       * <pre>
       *剩余的操作超时时间
       * </pre>
       *
       * <code>int32 rest_action_timeout = 16;</code>
       */
      public int getRestActionTimeout() {
        return restActionTimeout_;
      }
      /**
       * <pre>
       *剩余的操作超时时间
       * </pre>
       *
       * <code>int32 rest_action_timeout = 16;</code>
       */
      public Builder setRestActionTimeout(int value) {
        
        restActionTimeout_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       *剩余的操作超时时间
       * </pre>
       *
       * <code>int32 rest_action_timeout = 16;</code>
       */
      public Builder clearRestActionTimeout() {
        
        restActionTimeout_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.poker.protocols.texaspoker.proto.TexasGameReconnect)
    }

    // @@protoc_insertion_point(class_scope:com.poker.protocols.texaspoker.proto.TexasGameReconnect)
    private static final com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect();
    }

    public static com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<TexasGameReconnect>
        PARSER = new com.google.protobuf.AbstractParser<TexasGameReconnect>() {
      public TexasGameReconnect parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TexasGameReconnect(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<TexasGameReconnect> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<TexasGameReconnect> getParserForType() {
      return PARSER;
    }

    public com.poker.protocols.texaspoker.TexasGameReconnectProto.TexasGameReconnect getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_poker_protocols_texaspoker_proto_User_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_poker_protocols_texaspoker_proto_User_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_poker_protocols_texaspoker_proto_TexasGameReconnect_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_poker_protocols_texaspoker_proto_TexasGameReconnect_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\nAsrc/com/poker/protocols/texaspoker/pro" +
      "to/TexasGameReconnect.proto\022$com.poker.p" +
      "rotocols.texaspoker.proto\032=src/com/poker" +
      "/protocols/texaspoker/proto/TexasGameSta" +
      "rt.proto\032>src/com/poker/protocols/texasp" +
      "oker/proto/TexasGameAction.proto\"\316\001\n\004Use" +
      "r\022\013\n\003uid\030\001 \001(\003\022\021\n\tnick_name\030\002 \001(\t\022\025\n\rhea" +
      "d_portrait\030\003 \001(\t\022\014\n\004chip\030\004 \001(\003\022\r\n\005level\030" +
      "\005 \001(\005\022\016\n\006seatId\030\006 \001(\005\022N\n\007operate\030\007 \001(\0162=" +
      ".com.poker.protocols.texaspoker.proto.Te" +
      "xasGameAction.Operate\022\022\n\nround_chip\030\010 \001(" +
      "\003\"\322\003\n\022TexasGameReconnect\022<\n\006config\030\001 \001(\013" +
      "2,.com.poker.protocols.texaspoker.proto." +
      "Config\022:\n\006mUsers\030\002 \003(\0132*.com.poker.proto" +
      "cols.texaspoker.proto.User\022\024\n\014table_stat" +
      "us\030\003 \001(\005\022\021\n\tsb_seatId\030\004 \001(\005\022\021\n\tbb_seatId" +
      "\030\005 \001(\005\022\022\n\nbtn_seatId\030\006 \001(\005\022\r\n\005cards\030\007 \003(" +
      "\005\022\022\n\ncards_flop\030\010 \003(\005\022\022\n\ncards_trun\030\t \003(" +
      "\005\022\023\n\013cards_river\030\n \003(\005\022\026\n\016next_op_seatId" +
      "\030\013 \001(\005\022\031\n\021next_op_call_chip\030\014 \001(\003\022\036\n\026nex" +
      "t_op_min_raise_chip\030\r \001(\003\022\036\n\026next_op_max" +
      "_raise_chip\030\016 \001(\003\022\026\n\016max_round_chip\030\017 \001(" +
      "\003\022\033\n\023rest_action_timeout\030\020 \001(\005B9\n\036com.po" +
      "ker.protocols.texaspokerB\027TexasGameRecon" +
      "nectProtob\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.poker.protocols.texaspoker.TexasGameStartProto.getDescriptor(),
          com.poker.protocols.texaspoker.TexasGameActionProto.getDescriptor(),
        }, assigner);
    internal_static_com_poker_protocols_texaspoker_proto_User_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_poker_protocols_texaspoker_proto_User_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_poker_protocols_texaspoker_proto_User_descriptor,
        new java.lang.String[] { "Uid", "NickName", "HeadPortrait", "Chip", "Level", "SeatId", "Operate", "RoundChip", });
    internal_static_com_poker_protocols_texaspoker_proto_TexasGameReconnect_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_com_poker_protocols_texaspoker_proto_TexasGameReconnect_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_poker_protocols_texaspoker_proto_TexasGameReconnect_descriptor,
        new java.lang.String[] { "Config", "MUsers", "TableStatus", "SbSeatId", "BbSeatId", "BtnSeatId", "Cards", "CardsFlop", "CardsTrun", "CardsRiver", "NextOpSeatId", "NextOpCallChip", "NextOpMinRaiseChip", "NextOpMaxRaiseChip", "MaxRoundChip", "RestActionTimeout", });
    com.poker.protocols.texaspoker.TexasGameStartProto.getDescriptor();
    com.poker.protocols.texaspoker.TexasGameActionProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
